//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/ANTLRParser\BroncoLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, IDENTIFIER=2, NUMBER=3, TEXT_LITERAL=4, SKIP_COMMENT=5, SKIP_WS=6, 
		COLON=7, COMMA=8, OP=9, CP=10, PIPE=11, GT=12, TITLE_COLON=13, TITLE_COMMA=14, 
		TITLE_ID=15, TITLE_SKIP_WS=16, TITLE_NEWLINE=17, LT=18, META_TAG=19, META_WEIGHT=20, 
		TERMINAL=21, EMPTY_LINE=22, NEWLINE=23;
	public const int
		TITLE_MODE=1, TERMINAL_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TITLE_MODE", "TERMINAL_MODE"
	};

	public static readonly string[] ruleNames = {
		"ID", "NUM", "NL", "TITLE", "IDENTIFIER", "NUMBER", "TEXT_LITERAL", "SKIP_COMMENT", 
		"SKIP_WS", "COLON", "COMMA", "OP", "CP", "PIPE", "GT", "TITLE_COLON", 
		"TITLE_COMMA", "TITLE_ID", "TITLE_SKIP_WS", "TITLE_NEWLINE", "LT", "META_TAG", 
		"META_WEIGHT", "TERMINAL", "EMPTY_LINE", "NEWLINE"
	};


	public BroncoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BroncoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "':'", "','", "'('", "')'", 
		"'|'", "'>'", null, null, null, null, null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "IDENTIFIER", "NUMBER", "TEXT_LITERAL", "SKIP_COMMENT", 
		"SKIP_WS", "COLON", "COMMA", "OP", "CP", "PIPE", "GT", "TITLE_COLON", 
		"TITLE_COMMA", "TITLE_ID", "TITLE_SKIP_WS", "TITLE_NEWLINE", "LT", "META_TAG", 
		"META_WEIGHT", "TERMINAL", "EMPTY_LINE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,181,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,1,4,1,64,8,1,11,1,12,1,65,1,1,1,1,4,1,70,8,1,11,
		1,12,1,71,3,1,74,8,1,1,2,3,2,77,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,5,1,5,1,6,1,6,5,6,92,8,6,10,6,12,6,95,9,6,1,6,1,6,1,7,1,7,1,7,1,7,
		4,7,103,8,7,11,7,12,7,104,1,7,1,7,1,7,1,7,1,7,1,8,4,8,113,8,8,11,8,12,
		8,114,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,4,18,140,8,18,11,18,12,18,
		141,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
		21,1,21,3,21,159,8,21,1,22,1,22,1,22,1,23,4,23,165,8,23,11,23,12,23,166,
		1,24,1,24,5,24,171,8,24,10,24,12,24,174,9,24,1,24,1,24,1,24,1,24,1,25,
		1,25,1,93,0,26,3,0,5,0,7,0,9,1,11,2,13,3,15,4,17,5,19,6,21,7,23,8,25,9,
		27,10,29,11,31,12,33,13,35,14,37,15,39,16,41,17,43,18,45,19,47,20,49,21,
		51,22,53,23,3,0,1,2,7,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,
		0,48,57,1,0,42,42,3,0,9,10,13,13,32,32,2,0,9,9,32,32,5,0,10,10,13,13,35,
		35,37,37,60,60,187,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,1,35,1,0,0,0,1,37,1,0,0,
		0,1,39,1,0,0,0,1,41,1,0,0,0,2,43,1,0,0,0,2,45,1,0,0,0,2,47,1,0,0,0,2,49,
		1,0,0,0,2,51,1,0,0,0,2,53,1,0,0,0,3,55,1,0,0,0,5,63,1,0,0,0,7,76,1,0,0,
		0,9,80,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,89,1,0,0,0,17,98,1,0,0,0,
		19,112,1,0,0,0,21,118,1,0,0,0,23,120,1,0,0,0,25,122,1,0,0,0,27,124,1,0,
		0,0,29,126,1,0,0,0,31,128,1,0,0,0,33,132,1,0,0,0,35,134,1,0,0,0,37,136,
		1,0,0,0,39,139,1,0,0,0,41,145,1,0,0,0,43,149,1,0,0,0,45,153,1,0,0,0,47,
		160,1,0,0,0,49,164,1,0,0,0,51,168,1,0,0,0,53,179,1,0,0,0,55,59,7,0,0,0,
		56,58,7,1,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,
		60,4,1,0,0,0,61,59,1,0,0,0,62,64,7,2,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,
		63,1,0,0,0,65,66,1,0,0,0,66,73,1,0,0,0,67,69,5,46,0,0,68,70,7,2,0,0,69,
		68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,
		67,1,0,0,0,73,74,1,0,0,0,74,6,1,0,0,0,75,77,5,13,0,0,76,75,1,0,0,0,76,
		77,1,0,0,0,77,78,1,0,0,0,78,79,5,10,0,0,79,8,1,0,0,0,80,81,5,64,0,0,81,
		82,3,3,0,0,82,83,1,0,0,0,83,84,6,3,0,0,84,10,1,0,0,0,85,86,3,3,0,0,86,
		12,1,0,0,0,87,88,3,5,1,0,88,14,1,0,0,0,89,93,5,39,0,0,90,92,9,0,0,0,91,
		90,1,0,0,0,92,95,1,0,0,0,93,94,1,0,0,0,93,91,1,0,0,0,94,96,1,0,0,0,95,
		93,1,0,0,0,96,97,5,39,0,0,97,16,1,0,0,0,98,99,5,47,0,0,99,100,5,42,0,0,
		100,102,1,0,0,0,101,103,8,3,0,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,
		1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,107,5,42,0,0,107,108,5,47,
		0,0,108,109,1,0,0,0,109,110,6,7,1,0,110,18,1,0,0,0,111,113,7,4,0,0,112,
		111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,116,1,
		0,0,0,116,117,6,8,1,0,117,20,1,0,0,0,118,119,5,58,0,0,119,22,1,0,0,0,120,
		121,5,44,0,0,121,24,1,0,0,0,122,123,5,40,0,0,123,26,1,0,0,0,124,125,5,
		41,0,0,125,28,1,0,0,0,126,127,5,124,0,0,127,30,1,0,0,0,128,129,5,62,0,
		0,129,130,1,0,0,0,130,131,6,14,2,0,131,32,1,0,0,0,132,133,3,21,9,0,133,
		34,1,0,0,0,134,135,3,23,10,0,135,36,1,0,0,0,136,137,3,3,0,0,137,38,1,0,
		0,0,138,140,7,5,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,
		142,1,0,0,0,142,143,1,0,0,0,143,144,6,18,1,0,144,40,1,0,0,0,145,146,3,
		7,2,0,146,147,1,0,0,0,147,148,6,19,2,0,148,42,1,0,0,0,149,150,5,60,0,0,
		150,151,1,0,0,0,151,152,6,20,3,0,152,44,1,0,0,0,153,154,5,35,0,0,154,158,
		3,3,0,0,155,156,3,21,9,0,156,157,3,5,1,0,157,159,1,0,0,0,158,155,1,0,0,
		0,158,159,1,0,0,0,159,46,1,0,0,0,160,161,5,37,0,0,161,162,3,5,1,0,162,
		48,1,0,0,0,163,165,8,6,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,
		0,0,166,167,1,0,0,0,167,50,1,0,0,0,168,172,3,7,2,0,169,171,7,5,0,0,170,
		169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,
		0,0,0,174,172,1,0,0,0,175,176,3,7,2,0,176,177,1,0,0,0,177,178,6,24,3,0,
		178,52,1,0,0,0,179,180,3,7,2,0,180,54,1,0,0,0,15,0,1,2,59,65,71,73,76,
		93,104,114,141,158,166,172,4,2,1,0,6,0,0,2,2,0,2,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
