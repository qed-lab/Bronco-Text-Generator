//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/ANTLRParser\BroncoParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, BOOL_LITERAL=2, IDENTIFIER=3, NUMBER=4, SKIP_COMMENT=5, SKIP_WS=6, 
		COLON=7, COMMA=8, OP=9, CP=10, GT=11, START_QUOTE=12, CLOSE_SQUARE=13, 
		DOLLAR=14, EQUALS=15, QUESTION_MARK=16, SEMI_COLON=17, TITLE_COLON=18, 
		TITLE_COMMA=19, TITLE_ID=20, TITLE_SKIP_WS=21, TITLE_OPEN_SQUARE=22, TITLE_NEWLINE=23, 
		LT=24, META_TAG=25, META_WEIGHT=26, TERMINAL=27, END_QUOTE=28, EMPTY_LINE=29, 
		NEWLINE=30, PIPE=31, TERMINAL_OPEN_SQUARE=32;
	public const int
		RULE_file = 0, RULE_bag = 1, RULE_bag_default_condition = 2, RULE_bag_title_args = 3, 
		RULE_bag_item = 4, RULE_symbol = 5, RULE_symbol_list_item = 6, RULE_symbol_insert = 7, 
		RULE_symbol_ref = 8, RULE_symbol_call = 9, RULE_symbol_call_args = 10, 
		RULE_meta_data = 11;
	public static readonly string[] ruleNames = {
		"file", "bag", "bag_default_condition", "bag_title_args", "bag_item", 
		"symbol", "symbol_list_item", "symbol_insert", "symbol_ref", "symbol_call", 
		"symbol_call_args", "meta_data"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "':'", "','", "'('", "')'", 
		"'>'", null, "']'", "'$'", "'='", "'?'", "';'", null, null, null, null, 
		null, null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "BOOL_LITERAL", "IDENTIFIER", "NUMBER", "SKIP_COMMENT", 
		"SKIP_WS", "COLON", "COMMA", "OP", "CP", "GT", "START_QUOTE", "CLOSE_SQUARE", 
		"DOLLAR", "EQUALS", "QUESTION_MARK", "SEMI_COLON", "TITLE_COLON", "TITLE_COMMA", 
		"TITLE_ID", "TITLE_SKIP_WS", "TITLE_OPEN_SQUARE", "TITLE_NEWLINE", "LT", 
		"META_TAG", "META_WEIGHT", "TERMINAL", "END_QUOTE", "EMPTY_LINE", "NEWLINE", 
		"PIPE", "TERMINAL_OPEN_SQUARE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BroncoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BroncoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BroncoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BagContext[] bag() {
			return GetRuleContexts<BagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BagContext bag(int i) {
			return GetRuleContext<BagContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 24;
				bag();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TITLE );
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(BroncoParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_NEWLINE() { return GetToken(BroncoParser.TITLE_NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bag_title_argsContext bag_title_args() {
			return GetRuleContext<Bag_title_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_default_conditionContext bag_default_condition() {
			return GetRuleContext<Bag_default_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext[] bag_item() {
			return GetRuleContexts<Bag_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext bag_item(int i) {
			return GetRuleContext<Bag_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_LINE() { return GetToken(BroncoParser.EMPTY_LINE, 0); }
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 2, RULE_bag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(TITLE);
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TITLE_COLON) {
				{
				State = 32;
				bag_title_args();
				}
			}

			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TITLE_OPEN_SQUARE) {
				{
				State = 35;
				bag_default_condition();
				}
			}

			State = 38;
			Match(TITLE_NEWLINE);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 39;
				bag_item();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LT || _la==TERMINAL );
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EMPTY_LINE) {
				{
				State = 44;
				Match(EMPTY_LINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_default_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_OPEN_SQUARE() { return GetToken(BroncoParser.TITLE_OPEN_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE() { return GetToken(BroncoParser.CLOSE_SQUARE, 0); }
		public Bag_default_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_default_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_default_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_default_conditionContext bag_default_condition() {
		Bag_default_conditionContext _localctx = new Bag_default_conditionContext(Context, State);
		EnterRule(_localctx, 4, RULE_bag_default_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(TITLE_OPEN_SQUARE);
			State = 48;
			symbol_ref(0);
			State = 49;
			Match(CLOSE_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_title_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_COLON() { return GetToken(BroncoParser.TITLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TITLE_ID() { return GetTokens(BroncoParser.TITLE_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_ID(int i) {
			return GetToken(BroncoParser.TITLE_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TITLE_COMMA() { return GetTokens(BroncoParser.TITLE_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_COMMA(int i) {
			return GetToken(BroncoParser.TITLE_COMMA, i);
		}
		public Bag_title_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_title_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_title_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_title_argsContext bag_title_args() {
		Bag_title_argsContext _localctx = new Bag_title_argsContext(Context, State);
		EnterRule(_localctx, 6, RULE_bag_title_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(TITLE_COLON);
			State = 52;
			Match(TITLE_ID);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TITLE_COMMA) {
				{
				{
				State = 53;
				Match(TITLE_COMMA);
				State = 54;
				Match(TITLE_ID);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL_OPEN_SQUARE() { return GetToken(BroncoParser.TERMINAL_OPEN_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE() { return GetToken(BroncoParser.CLOSE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(BroncoParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(BroncoParser.PIPE, 0); }
		public Bag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_itemContext bag_item() {
		Bag_itemContext _localctx = new Bag_itemContext(Context, State);
		EnterRule(_localctx, 8, RULE_bag_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			symbol();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TERMINAL_OPEN_SQUARE) {
				{
				State = 61;
				Match(TERMINAL_OPEN_SQUARE);
				State = 62;
				symbol_ref(0);
				State = 63;
				Match(CLOSE_SQUARE);
				}
			}

			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE || _la==PIPE) {
				{
				State = 67;
				_la = TokenStream.LA(1);
				if ( !(_la==NEWLINE || _la==PIPE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_list_itemContext[] symbol_list_item() {
			return GetRuleContexts<Symbol_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_list_itemContext symbol_list_item(int i) {
			return GetRuleContext<Symbol_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext[] meta_data() {
			return GetRuleContexts<Meta_dataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext meta_data(int i) {
			return GetRuleContext<Meta_dataContext>(i);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_symbol);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 70;
					symbol_list_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 73;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==META_TAG || _la==META_WEIGHT) {
				{
				{
				State = 75;
				meta_data();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL() { return GetToken(BroncoParser.TERMINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_insertContext symbol_insert() {
			return GetRuleContext<Symbol_insertContext>(0);
		}
		public Symbol_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_list_itemContext symbol_list_item() {
		Symbol_list_itemContext _localctx = new Symbol_list_itemContext(Context, State);
		EnterRule(_localctx, 12, RULE_symbol_list_item);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				Match(TERMINAL);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				symbol_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_insertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BroncoParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BroncoParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		public Symbol_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_insert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_insertContext symbol_insert() {
		Symbol_insertContext _localctx = new Symbol_insertContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_insert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(LT);
			{
			State = 86;
			symbol_ref(0);
			}
			State = 87;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_callContext symbol_call() {
			return GetRuleContext<Symbol_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(BroncoParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext[] symbol_ref() {
			return GetRuleContexts<Symbol_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref(int i) {
			return GetRuleContext<Symbol_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(BroncoParser.CP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BroncoParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(BroncoParser.BOOL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_QUOTE() { return GetToken(BroncoParser.START_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_QUOTE() { return GetToken(BroncoParser.END_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(BroncoParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BroncoParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(BroncoParser.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON() { return GetToken(BroncoParser.SEMI_COLON, 0); }
		public Symbol_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_refContext symbol_ref() {
		return symbol_ref(0);
	}

	private Symbol_refContext symbol_ref(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_refContext _localctx = new Symbol_refContext(Context, _parentState);
		Symbol_refContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_symbol_ref, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 90;
				symbol_call();
				}
				break;
			case OP:
				{
				State = 91;
				Match(OP);
				State = 92;
				symbol_ref(0);
				State = 93;
				Match(CP);
				}
				break;
			case NUMBER:
				{
				State = 95;
				Match(NUMBER);
				}
				break;
			case BOOL_LITERAL:
				{
				State = 96;
				Match(BOOL_LITERAL);
				}
				break;
			case START_QUOTE:
				{
				{
				State = 97;
				Match(START_QUOTE);
				State = 98;
				symbol();
				State = 99;
				Match(END_QUOTE);
				}
				}
				break;
			case DOLLAR:
				{
				State = 101;
				Match(DOLLAR);
				State = 102;
				symbol_ref(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 114;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new Symbol_refContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_symbol_ref);
						State = 105;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 106;
						Match(EQUALS);
						State = 107;
						symbol_ref(4);
						}
						break;
					case 2:
						{
						_localctx = new Symbol_refContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_symbol_ref);
						State = 108;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 109;
						Match(QUESTION_MARK);
						State = 110;
						symbol_ref(0);
						State = 111;
						Match(SEMI_COLON);
						State = 112;
						symbol_ref(3);
						}
						break;
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BroncoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_call_argsContext symbol_call_args() {
			return GetRuleContext<Symbol_call_argsContext>(0);
		}
		public Symbol_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_callContext symbol_call() {
		Symbol_callContext _localctx = new Symbol_callContext(Context, State);
		EnterRule(_localctx, 18, RULE_symbol_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(IDENTIFIER);
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 120;
				symbol_call_args();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_call_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BroncoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext[] symbol_ref() {
			return GetRuleContexts<Symbol_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref(int i) {
			return GetRuleContext<Symbol_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BroncoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BroncoParser.COMMA, i);
		}
		public Symbol_call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_call_argsContext symbol_call_args() {
		Symbol_call_argsContext _localctx = new Symbol_call_argsContext(Context, State);
		EnterRule(_localctx, 20, RULE_symbol_call_args);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(COLON);
			State = 124;
			symbol_ref(0);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 125;
					Match(COMMA);
					State = 126;
					symbol_ref(0);
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META_TAG() { return GetToken(BroncoParser.META_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META_WEIGHT() { return GetToken(BroncoParser.META_WEIGHT, 0); }
		public Meta_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_dataContext meta_data() {
		Meta_dataContext _localctx = new Meta_dataContext(Context, State);
		EnterRule(_localctx, 22, RULE_meta_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==META_TAG || _la==META_WEIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return symbol_ref_sempred((Symbol_refContext)_localctx, predIndex);
		}
		return true;
	}
	private bool symbol_ref_sempred(Symbol_refContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,32,135,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,4,0,26,8,0,11,0,12,0,27,1,
		0,1,0,1,1,1,1,3,1,34,8,1,1,1,3,1,37,8,1,1,1,1,1,4,1,41,8,1,11,1,12,1,42,
		1,1,3,1,46,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,56,8,3,10,3,12,3,59,
		9,3,1,4,1,4,1,4,1,4,1,4,3,4,66,8,4,1,4,3,4,69,8,4,1,5,4,5,72,8,5,11,5,
		12,5,73,1,5,5,5,77,8,5,10,5,12,5,80,9,5,1,6,1,6,3,6,84,8,6,1,7,1,7,1,7,
		1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,104,8,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,115,8,8,10,8,12,8,118,9,8,1,
		9,1,9,3,9,122,8,9,1,10,1,10,1,10,1,10,5,10,128,8,10,10,10,12,10,131,9,
		10,1,11,1,11,1,11,0,1,16,12,0,2,4,6,8,10,12,14,16,18,20,22,0,2,1,0,30,
		31,1,0,25,26,142,0,25,1,0,0,0,2,31,1,0,0,0,4,47,1,0,0,0,6,51,1,0,0,0,8,
		60,1,0,0,0,10,71,1,0,0,0,12,83,1,0,0,0,14,85,1,0,0,0,16,103,1,0,0,0,18,
		119,1,0,0,0,20,123,1,0,0,0,22,132,1,0,0,0,24,26,3,2,1,0,25,24,1,0,0,0,
		26,27,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,29,1,0,0,0,29,30,5,0,0,1,
		30,1,1,0,0,0,31,33,5,1,0,0,32,34,3,6,3,0,33,32,1,0,0,0,33,34,1,0,0,0,34,
		36,1,0,0,0,35,37,3,4,2,0,36,35,1,0,0,0,36,37,1,0,0,0,37,38,1,0,0,0,38,
		40,5,23,0,0,39,41,3,8,4,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,
		43,1,0,0,0,43,45,1,0,0,0,44,46,5,29,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,
		3,1,0,0,0,47,48,5,22,0,0,48,49,3,16,8,0,49,50,5,13,0,0,50,5,1,0,0,0,51,
		52,5,18,0,0,52,57,5,20,0,0,53,54,5,19,0,0,54,56,5,20,0,0,55,53,1,0,0,0,
		56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,7,1,0,0,0,59,57,1,0,0,0,60,
		65,3,10,5,0,61,62,5,32,0,0,62,63,3,16,8,0,63,64,5,13,0,0,64,66,1,0,0,0,
		65,61,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,69,7,0,0,0,68,67,1,0,0,0,
		68,69,1,0,0,0,69,9,1,0,0,0,70,72,3,12,6,0,71,70,1,0,0,0,72,73,1,0,0,0,
		73,71,1,0,0,0,73,74,1,0,0,0,74,78,1,0,0,0,75,77,3,22,11,0,76,75,1,0,0,
		0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,11,1,0,0,0,80,78,1,0,0,
		0,81,84,5,27,0,0,82,84,3,14,7,0,83,81,1,0,0,0,83,82,1,0,0,0,84,13,1,0,
		0,0,85,86,5,24,0,0,86,87,3,16,8,0,87,88,5,11,0,0,88,15,1,0,0,0,89,90,6,
		8,-1,0,90,104,3,18,9,0,91,92,5,9,0,0,92,93,3,16,8,0,93,94,5,10,0,0,94,
		104,1,0,0,0,95,104,5,4,0,0,96,104,5,2,0,0,97,98,5,12,0,0,98,99,3,10,5,
		0,99,100,5,28,0,0,100,104,1,0,0,0,101,102,5,14,0,0,102,104,3,16,8,1,103,
		89,1,0,0,0,103,91,1,0,0,0,103,95,1,0,0,0,103,96,1,0,0,0,103,97,1,0,0,0,
		103,101,1,0,0,0,104,116,1,0,0,0,105,106,10,3,0,0,106,107,5,15,0,0,107,
		115,3,16,8,4,108,109,10,2,0,0,109,110,5,16,0,0,110,111,3,16,8,0,111,112,
		5,17,0,0,112,113,3,16,8,3,113,115,1,0,0,0,114,105,1,0,0,0,114,108,1,0,
		0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,17,1,0,0,0,118,
		116,1,0,0,0,119,121,5,3,0,0,120,122,3,20,10,0,121,120,1,0,0,0,121,122,
		1,0,0,0,122,19,1,0,0,0,123,124,5,7,0,0,124,129,3,16,8,0,125,126,5,8,0,
		0,126,128,3,16,8,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,21,1,0,0,0,131,129,1,0,0,0,132,133,7,1,0,0,133,23,1,0,
		0,0,16,27,33,36,42,45,57,65,68,73,78,83,103,114,116,121,129
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
