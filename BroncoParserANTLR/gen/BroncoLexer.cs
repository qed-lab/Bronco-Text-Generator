//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/BroncoParserANTLR\BroncoLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE_NAME=1, TITLE_CLOSE=2, TITLE_OPEN=3, WHITESPACE=4, LINE_CLOSE=5, 
		BAG_CLOSE=6, NON_TERMINAL=7, TERMINAL=8;
	public const int
		WS_BAG_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "WS_BAG_MODE"
	};

	public static readonly string[] ruleNames = {
		"TITLE_NAME", "TITLE_CLOSE", "TITLE_OPEN", "WHITESPACE", "LINE_CLOSE", 
		"BAG_CLOSE", "NON_TERMINAL", "TERMINAL", "ID", "WS", "TERMINAL_CHAR"
	};


	public BroncoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BroncoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE_NAME", "TITLE_CLOSE", "TITLE_OPEN", "WHITESPACE", "LINE_CLOSE", 
		"BAG_CLOSE", "NON_TERMINAL", "TERMINAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,93,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
		7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,5,1,28,8,1,10,1,12,1,
		31,9,1,1,1,1,1,5,1,35,8,1,10,1,12,1,38,9,1,1,1,1,1,1,1,1,1,1,2,5,2,45,
		8,2,10,2,12,2,48,9,2,1,2,1,2,5,2,52,8,2,10,2,12,2,55,9,2,1,3,1,3,1,3,1,
		3,1,4,1,4,1,5,1,5,5,5,65,8,5,10,5,12,5,68,9,5,1,5,1,5,1,5,1,5,1,6,1,6,
		1,6,1,6,1,7,4,7,79,8,7,11,7,12,7,80,1,8,1,8,5,8,85,8,8,10,8,12,8,88,9,
		8,1,9,1,9,1,10,1,10,0,0,11,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,0,20,
		0,22,0,2,0,1,5,2,0,9,10,32,32,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
		122,2,0,9,9,32,32,4,0,10,10,35,35,37,37,60,60,95,0,2,1,0,0,0,0,4,1,0,0,
		0,0,6,1,0,0,0,0,8,1,0,0,0,1,10,1,0,0,0,1,12,1,0,0,0,1,14,1,0,0,0,1,16,
		1,0,0,0,2,24,1,0,0,0,4,29,1,0,0,0,6,46,1,0,0,0,8,56,1,0,0,0,10,60,1,0,
		0,0,12,62,1,0,0,0,14,73,1,0,0,0,16,78,1,0,0,0,18,82,1,0,0,0,20,89,1,0,
		0,0,22,91,1,0,0,0,24,25,3,18,8,0,25,3,1,0,0,0,26,28,3,20,9,0,27,26,1,0,
		0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,32,1,0,0,0,31,29,1,0,
		0,0,32,36,5,61,0,0,33,35,3,20,9,0,34,33,1,0,0,0,35,38,1,0,0,0,36,34,1,
		0,0,0,36,37,1,0,0,0,37,39,1,0,0,0,38,36,1,0,0,0,39,40,5,10,0,0,40,41,1,
		0,0,0,41,42,6,1,0,0,42,5,1,0,0,0,43,45,3,20,9,0,44,43,1,0,0,0,45,48,1,
		0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,53,5,
		61,0,0,50,52,3,20,9,0,51,50,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,0,53,54,
		1,0,0,0,54,7,1,0,0,0,55,53,1,0,0,0,56,57,7,0,0,0,57,58,1,0,0,0,58,59,6,
		3,1,0,59,9,1,0,0,0,60,61,5,10,0,0,61,11,1,0,0,0,62,66,5,10,0,0,63,65,3,
		20,9,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,
		0,0,0,68,66,1,0,0,0,69,70,5,10,0,0,70,71,1,0,0,0,71,72,6,5,2,0,72,13,1,
		0,0,0,73,74,5,60,0,0,74,75,3,18,8,0,75,76,5,62,0,0,76,15,1,0,0,0,77,79,
		3,22,10,0,78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,17,
		1,0,0,0,82,86,7,1,0,0,83,85,7,2,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,
		1,0,0,0,86,87,1,0,0,0,87,19,1,0,0,0,88,86,1,0,0,0,89,90,7,3,0,0,90,21,
		1,0,0,0,91,92,8,4,0,0,92,23,1,0,0,0,9,0,1,29,36,46,53,66,80,86,3,2,1,0,
		6,0,0,2,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
