//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\angry\source\repos\BroncoLibrary\BroncoParser\broncoGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class broncoGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE_OPEN=1, TITLE_TEXT=2, TITLE_CLOSE=3, IGNORE=4;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWER", "UPPER", "DIGIT", "ID", "WHITESPACE", "NEWLINE", "TITLE_OPEN", 
		"TITLE_TEXT", "TITLE_CLOSE", "IGNORE"
	};


	public broncoGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public broncoGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE_OPEN", "TITLE_TEXT", "TITLE_CLOSE", "IGNORE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "broncoGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static broncoGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x6', 'Z', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ' ', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '&', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', ')', '\v', '\x5', '\x3', '\x6', 
		'\x6', '\x6', ',', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '-', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\x33', '\n', '\a', '\r', 
		'\a', '\xE', '\a', '\x34', '\x3', '\b', '\a', '\b', '\x38', '\n', '\b', 
		'\f', '\b', '\xE', '\b', ';', '\v', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '?', '\n', '\b', '\f', '\b', '\xE', '\b', '\x42', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\a', '\n', 'G', '\n', '\n', '\f', '\n', 
		'\xE', '\n', 'J', '\v', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'N', 
		'\n', '\n', '\f', '\n', '\xE', '\n', 'Q', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'W', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x2', '\x2', '\f', '\x3', '\x2', '\x5', '\x2', '\a', '\x2', 
		'\t', '\x2', '\v', '\x2', '\r', '\x2', '\xF', '\x3', '\x11', '\x4', '\x13', 
		'\x5', '\x15', '\x6', '\x3', '\x2', '\a', '\x3', '\x2', '\x63', '|', '\x3', 
		'\x2', '\x43', '\\', '\x3', '\x2', '\x32', ';', '\x4', '\x2', '\v', '\v', 
		'\"', '\"', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x2', '`', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x17', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\a', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x1F', '\x3', '\x2', '\x2', '\x2', '\v', '+', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x32', '\x3', '\x2', '\x2', '\x2', '\xF', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x13', 'H', '\x3', '\x2', '\x2', '\x2', '\x15', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x18', '\t', '\x2', '\x2', '\x2', '\x18', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\t', '\x3', '\x2', '\x2', '\x1A', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\t', '\x4', '\x2', 
		'\x2', '\x1C', '\b', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', '\x5', '\x3', 
		'\x2', '\x2', '\x1E', ' ', '\x5', '\x5', '\x3', '\x2', '\x1F', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		' ', '\'', '\x3', '\x2', '\x2', '\x2', '!', '&', '\x5', '\x3', '\x2', 
		'\x2', '\"', '&', '\x5', '\x5', '\x3', '\x2', '#', '&', '\x5', '\a', '\x4', 
		'\x2', '$', '&', '\a', '\x61', '\x2', '\x2', '%', '!', '\x3', '\x2', '\x2', 
		'\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', '\n', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', '*', ',', '\t', '\x5', '\x2', '\x2', '+', 
		'*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\xF', '\x2', 
		'\x2', '\x30', '\x33', '\a', '\f', '\x2', '\x2', '\x31', '\x33', '\t', 
		'\x6', '\x2', '\x2', '\x32', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\xE', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x5', '\v', '\x6', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '<', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', 
		'@', '\a', '?', '\x2', '\x2', '=', '?', '\x5', '\v', '\x6', '\x2', '>', 
		'=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x10', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\t', '\x5', '\x2', '\x44', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x5', '\v', '\x6', '\x2', 
		'\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'O', '\a', '?', '\x2', '\x2', 'L', 'N', '\x5', '\v', 
		'\x6', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\x5', '\r', '\a', '\x2', 'S', '\x14', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'W', '\x5', '\r', '\a', '\x2', 'U', 'W', '\x5', 
		'\v', '\x6', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\b', 
		'\v', '\x2', '\x2', 'Y', '\x16', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2', 
		'\x1F', '%', '\'', '-', '\x32', '\x34', '\x39', '@', 'H', 'O', 'V', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
