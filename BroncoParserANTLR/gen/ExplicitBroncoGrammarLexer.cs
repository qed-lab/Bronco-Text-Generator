//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/BroncoParserANTLR\ExplicitBroncoGrammar.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ExplicitBroncoGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ID=1, TERMINAL=2, FLOAT=3, INT=4, WS=5, AT=6, HASH=7, PERCENT=8, COLON=9, 
		COMMA=10, LT=11, GT=12, TILDA=13, PIPE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ID", "TERMINAL", "FLOAT", "INT", "WS", "AT", "HASH", "PERCENT", "COLON", 
		"COMMA", "LT", "GT", "TILDA", "PIPE"
	};


	public ExplicitBroncoGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExplicitBroncoGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'@'", "'#'", "'%'", "':'", "','", 
		"'<'", "'>'", "'~'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "TERMINAL", "FLOAT", "INT", "WS", "AT", "HASH", "PERCENT", 
		"COLON", "COMMA", "LT", "GT", "TILDA", "PIPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExplicitBroncoGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExplicitBroncoGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,79,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,
		0,5,0,32,8,0,10,0,12,0,35,9,0,1,1,1,1,4,1,39,8,1,11,1,12,1,40,1,1,1,1,
		1,2,1,2,1,2,3,2,48,8,2,1,3,4,3,51,8,3,11,3,12,3,52,1,4,4,4,56,8,4,11,4,
		12,4,57,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
		1,11,1,12,1,12,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,1,0,5,2,0,65,90,97,122,4,0,48,57,65,90,
		95,95,97,122,1,0,39,39,1,0,48,57,3,0,9,10,13,13,32,32,83,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,36,1,0,0,0,5,44,1,0,0,0,7,50,1,0,0,
		0,9,55,1,0,0,0,11,61,1,0,0,0,13,63,1,0,0,0,15,65,1,0,0,0,17,67,1,0,0,0,
		19,69,1,0,0,0,21,71,1,0,0,0,23,73,1,0,0,0,25,75,1,0,0,0,27,77,1,0,0,0,
		29,33,7,0,0,0,30,32,7,1,0,0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,
		33,34,1,0,0,0,34,2,1,0,0,0,35,33,1,0,0,0,36,38,5,39,0,0,37,39,8,2,0,0,
		38,37,1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,42,1,0,0,0,
		42,43,5,39,0,0,43,4,1,0,0,0,44,47,3,7,3,0,45,46,5,46,0,0,46,48,3,7,3,0,
		47,45,1,0,0,0,47,48,1,0,0,0,48,6,1,0,0,0,49,51,7,3,0,0,50,49,1,0,0,0,51,
		52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,8,1,0,0,0,54,56,7,4,0,0,55,54,
		1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,60,
		6,4,0,0,60,10,1,0,0,0,61,62,5,64,0,0,62,12,1,0,0,0,63,64,5,35,0,0,64,14,
		1,0,0,0,65,66,5,37,0,0,66,16,1,0,0,0,67,68,5,58,0,0,68,18,1,0,0,0,69,70,
		5,44,0,0,70,20,1,0,0,0,71,72,5,60,0,0,72,22,1,0,0,0,73,74,5,62,0,0,74,
		24,1,0,0,0,75,76,5,126,0,0,76,26,1,0,0,0,77,78,5,124,0,0,78,28,1,0,0,0,
		6,0,33,40,47,52,57,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
