//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\angry\source\repos\BroncoLibrary\BroncoParser\broncoGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class broncoGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, CALL_OPEN=2, CALL_INNER=3, CALL_CLOSE=4, TERMINAL=5, TITLE_OPEN=6, 
		TITLE_TEXT=7, TITLE_CLOSE=8;
	public const int
		RULE_start = 0, RULE_bag = 1, RULE_symbol_call = 2, RULE_bag_item = 3, 
		RULE_title = 4;
	public static readonly string[] ruleNames = {
		"start", "bag", "symbol_call", "bag_item", "title"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "CALL_OPEN", "CALL_INNER", "CALL_CLOSE", "TERMINAL", 
		"TITLE_OPEN", "TITLE_TEXT", "TITLE_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "broncoGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static broncoGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public broncoGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public broncoGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public BagContext bag() {
			return GetRuleContext<BagContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbroncoGrammarVisitor<TResult> typedVisitor = visitor as IbroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; bag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(broncoGrammarParser.NEWLINE, 0); }
		public Bag_itemContext[] bag_item() {
			return GetRuleContexts<Bag_itemContext>();
		}
		public Bag_itemContext bag_item(int i) {
			return GetRuleContext<Bag_itemContext>(i);
		}
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbroncoGrammarVisitor<TResult> typedVisitor = visitor as IbroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 2, RULE_bag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; title();
			State = 13; Match(NEWLINE);
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14; bag_item();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CALL_OPEN || _la==TERMINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_callContext : ParserRuleContext {
		public ITerminalNode CALL_OPEN() { return GetToken(broncoGrammarParser.CALL_OPEN, 0); }
		public ITerminalNode CALL_INNER() { return GetToken(broncoGrammarParser.CALL_INNER, 0); }
		public ITerminalNode CALL_CLOSE() { return GetToken(broncoGrammarParser.CALL_CLOSE, 0); }
		public Symbol_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbroncoGrammarVisitor<TResult> typedVisitor = visitor as IbroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_callContext symbol_call() {
		Symbol_callContext _localctx = new Symbol_callContext(Context, State);
		EnterRule(_localctx, 4, RULE_symbol_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(CALL_OPEN);
			State = 20; Match(CALL_INNER);
			State = 21; Match(CALL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_itemContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(broncoGrammarParser.NEWLINE, 0); }
		public Symbol_callContext[] symbol_call() {
			return GetRuleContexts<Symbol_callContext>();
		}
		public Symbol_callContext symbol_call(int i) {
			return GetRuleContext<Symbol_callContext>(i);
		}
		public ITerminalNode[] TERMINAL() { return GetTokens(broncoGrammarParser.TERMINAL); }
		public ITerminalNode TERMINAL(int i) {
			return GetToken(broncoGrammarParser.TERMINAL, i);
		}
		public Bag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbroncoGrammarVisitor<TResult> typedVisitor = visitor as IbroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_itemContext bag_item() {
		Bag_itemContext _localctx = new Bag_itemContext(Context, State);
		EnterRule(_localctx, 6, RULE_bag_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 25;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALL_OPEN:
					{
					State = 23; symbol_call();
					}
					break;
				case TERMINAL:
					{
					State = 24; Match(TERMINAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CALL_OPEN || _la==TERMINAL );
			State = 29; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		public ITerminalNode TITLE_OPEN() { return GetToken(broncoGrammarParser.TITLE_OPEN, 0); }
		public ITerminalNode TITLE_TEXT() { return GetToken(broncoGrammarParser.TITLE_TEXT, 0); }
		public ITerminalNode TITLE_CLOSE() { return GetToken(broncoGrammarParser.TITLE_CLOSE, 0); }
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbroncoGrammarVisitor<TResult> typedVisitor = visitor as IbroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 8, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(TITLE_OPEN);
			State = 32; Match(TITLE_TEXT);
			State = 33; Match(TITLE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '&', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', '\x12', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x13', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x6', '\x5', '\x1C', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'\x1D', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', 
		'\b', '\n', '\x2', '\x2', '\x2', '#', '\x2', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\xE', '\x3', '\x2', '\x2', '\x2', '\x6', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x1B', '\x3', '\x2', '\x2', '\x2', '\n', '!', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5', '\x4', '\x3', '\x2', '\r', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\n', '\x6', '\x2', 
		'\xF', '\x11', '\a', '\x3', '\x2', '\x2', '\x10', '\x12', '\x5', '\b', 
		'\x5', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x16', '\a', '\x4', '\x2', '\x2', '\x16', '\x17', 
		'\a', '\x5', '\x2', '\x2', '\x17', '\x18', '\a', '\x6', '\x2', '\x2', 
		'\x18', '\a', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', '\x5', '\x6', 
		'\x4', '\x2', '\x1A', '\x1C', '\a', '\a', '\x2', '\x2', '\x1B', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x3', '\x2', '\x2', ' ', 
		'\t', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\b', '\x2', '\x2', 
		'\"', '#', '\a', '\t', '\x2', '\x2', '#', '$', '\a', '\n', '\x2', '\x2', 
		'$', '\v', '\x3', '\x2', '\x2', '\x2', '\x5', '\x13', '\x1B', '\x1D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
