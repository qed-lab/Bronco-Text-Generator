//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/BroncoParserANTLR\BroncoParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoParserLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ID=1, TERMINAL=2, NL=3, WS=4, AT=5, HASH=6, PERCENT=7, COLON=8, COMMA=9, 
		LT=10, GT=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ID", "TERMINAL", "NL", "WS", "AT", "HASH", "PERCENT", "COLON", "COMMA", 
		"LT", "GT"
	};


	public BroncoParserLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BroncoParserLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\\n'", null, "'@'", "'#'", "'%'", "':'", "','", "'<'", 
		"'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "TERMINAL", "NL", "WS", "AT", "HASH", "PERCENT", "COLON", 
		"COMMA", "LT", "GT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoParserLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,61,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,5,0,26,8,0,10,0,12,0,29,9,0,
		1,1,1,1,4,1,33,8,1,11,1,12,1,34,1,1,1,1,1,2,1,2,1,3,4,3,42,8,3,11,3,12,
		3,43,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
		0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,4,2,0,65,
		90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,2,0,9,9,32,32,63,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,
		0,0,0,3,30,1,0,0,0,5,38,1,0,0,0,7,41,1,0,0,0,9,47,1,0,0,0,11,49,1,0,0,
		0,13,51,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,19,57,1,0,0,0,21,59,1,0,0,
		0,23,27,7,0,0,0,24,26,7,1,0,0,25,24,1,0,0,0,26,29,1,0,0,0,27,25,1,0,0,
		0,27,28,1,0,0,0,28,2,1,0,0,0,29,27,1,0,0,0,30,32,5,34,0,0,31,33,8,2,0,
		0,32,31,1,0,0,0,33,34,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,36,1,0,0,
		0,36,37,5,34,0,0,37,4,1,0,0,0,38,39,5,10,0,0,39,6,1,0,0,0,40,42,7,3,0,
		0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,45,1,0,0,
		0,45,46,6,3,0,0,46,8,1,0,0,0,47,48,5,64,0,0,48,10,1,0,0,0,49,50,5,35,0,
		0,50,12,1,0,0,0,51,52,5,37,0,0,52,14,1,0,0,0,53,54,5,58,0,0,54,16,1,0,
		0,0,55,56,5,44,0,0,56,18,1,0,0,0,57,58,5,60,0,0,58,20,1,0,0,0,59,60,5,
		62,0,0,60,22,1,0,0,0,4,0,27,34,43,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
