//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/ANTLRParser\BroncoParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, IDENTIFIER=2, NUMBER=3, SKIP_COMMENT=4, SKIP_WS=5, COLON=6, COMMA=7, 
		OP=8, CP=9, PIPE=10, GT=11, TITLE_COLON=12, TITLE_COMMA=13, TITLE_ID=14, 
		TITLE_SKIP_WS=15, TITLE_NEWLINE=16, LT=17, META_TAG=18, META_WEIGHT=19, 
		TERMINAL=20, EMPTY_LINE=21, NEWLINE=22;
	public const int
		RULE_file = 0, RULE_bag = 1, RULE_bag_title = 2, RULE_bag_title_args = 3, 
		RULE_bag_item = 4, RULE_symbol = 5, RULE_symbol_list_item = 6, RULE_symbol_insert = 7, 
		RULE_symbol_ref = 8, RULE_symbol_call = 9, RULE_symbol_call_inner = 10, 
		RULE_symbol_call_args = 11, RULE_meta_data = 12;
	public static readonly string[] ruleNames = {
		"file", "bag", "bag_title", "bag_title_args", "bag_item", "symbol", "symbol_list_item", 
		"symbol_insert", "symbol_ref", "symbol_call", "symbol_call_inner", "symbol_call_args", 
		"meta_data"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "':'", "','", "'('", "')'", "'|'", 
		"'>'", null, null, null, null, null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "IDENTIFIER", "NUMBER", "SKIP_COMMENT", "SKIP_WS", "COLON", 
		"COMMA", "OP", "CP", "PIPE", "GT", "TITLE_COLON", "TITLE_COMMA", "TITLE_ID", 
		"TITLE_SKIP_WS", "TITLE_NEWLINE", "LT", "META_TAG", "META_WEIGHT", "TERMINAL", 
		"EMPTY_LINE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BroncoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BroncoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BroncoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BagContext[] bag() {
			return GetRuleContexts<BagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BagContext bag(int i) {
			return GetRuleContext<BagContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				bag();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TITLE );
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bag_titleContext bag_title() {
			return GetRuleContext<Bag_titleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext[] bag_item() {
			return GetRuleContexts<Bag_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext bag_item(int i) {
			return GetRuleContext<Bag_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_LINE() { return GetToken(BroncoParser.EMPTY_LINE, 0); }
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 2, RULE_bag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			bag_title();
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34;
				bag_item();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LT || _la==TERMINAL );
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EMPTY_LINE) {
				{
				State = 39;
				Match(EMPTY_LINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_titleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(BroncoParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_NEWLINE() { return GetToken(BroncoParser.TITLE_NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bag_title_argsContext bag_title_args() {
			return GetRuleContext<Bag_title_argsContext>(0);
		}
		public Bag_titleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_title(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_titleContext bag_title() {
		Bag_titleContext _localctx = new Bag_titleContext(Context, State);
		EnterRule(_localctx, 4, RULE_bag_title);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(TITLE);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TITLE_COLON) {
				{
				State = 43;
				bag_title_args();
				}
			}

			State = 46;
			Match(TITLE_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_title_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_COLON() { return GetToken(BroncoParser.TITLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TITLE_ID() { return GetTokens(BroncoParser.TITLE_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_ID(int i) {
			return GetToken(BroncoParser.TITLE_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TITLE_COMMA() { return GetTokens(BroncoParser.TITLE_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_COMMA(int i) {
			return GetToken(BroncoParser.TITLE_COMMA, i);
		}
		public Bag_title_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_title_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_title_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_title_argsContext bag_title_args() {
		Bag_title_argsContext _localctx = new Bag_title_argsContext(Context, State);
		EnterRule(_localctx, 6, RULE_bag_title_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(TITLE_COLON);
			State = 49;
			Match(TITLE_ID);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TITLE_COMMA) {
				{
				{
				State = 50;
				Match(TITLE_COMMA);
				State = 51;
				Match(TITLE_ID);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(BroncoParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(BroncoParser.NEWLINE, 0); }
		public Bag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_itemContext bag_item() {
		Bag_itemContext _localctx = new Bag_itemContext(Context, State);
		EnterRule(_localctx, 8, RULE_bag_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			symbol();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PIPE) {
				{
				State = 58;
				Match(PIPE);
				State = 59;
				symbol_ref();
				}
			}

			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 62;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_list_itemContext[] symbol_list_item() {
			return GetRuleContexts<Symbol_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_list_itemContext symbol_list_item(int i) {
			return GetRuleContext<Symbol_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext[] meta_data() {
			return GetRuleContexts<Meta_dataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext meta_data(int i) {
			return GetRuleContext<Meta_dataContext>(i);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_symbol);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 65;
					symbol_list_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==META_TAG || _la==META_WEIGHT) {
				{
				{
				State = 70;
				meta_data();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL() { return GetToken(BroncoParser.TERMINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_insertContext symbol_insert() {
			return GetRuleContext<Symbol_insertContext>(0);
		}
		public Symbol_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_list_itemContext symbol_list_item() {
		Symbol_list_itemContext _localctx = new Symbol_list_itemContext(Context, State);
		EnterRule(_localctx, 12, RULE_symbol_list_item);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				Match(TERMINAL);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				symbol_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_insertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BroncoParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BroncoParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_call_innerContext symbol_call_inner() {
			return GetRuleContext<Symbol_call_innerContext>(0);
		}
		public Symbol_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_insert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_insertContext symbol_insert() {
		Symbol_insertContext _localctx = new Symbol_insertContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_insert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(LT);
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 81;
				symbol_ref();
				}
				break;
			case 2:
				{
				State = 82;
				symbol_call_inner();
				}
				break;
			}
			State = 85;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BroncoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_callContext symbol_call() {
			return GetRuleContext<Symbol_callContext>(0);
		}
		public Symbol_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_refContext symbol_ref() {
		Symbol_refContext _localctx = new Symbol_refContext(Context, State);
		EnterRule(_localctx, 16, RULE_symbol_ref);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(IDENTIFIER);
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				symbol_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(BroncoParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_call_innerContext symbol_call_inner() {
			return GetRuleContext<Symbol_call_innerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(BroncoParser.CP, 0); }
		public Symbol_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_callContext symbol_call() {
		Symbol_callContext _localctx = new Symbol_callContext(Context, State);
		EnterRule(_localctx, 18, RULE_symbol_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(OP);
			State = 92;
			symbol_call_inner();
			State = 93;
			Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_call_innerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BroncoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_call_argsContext symbol_call_args() {
			return GetRuleContext<Symbol_call_argsContext>(0);
		}
		public Symbol_call_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call_inner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call_inner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_call_innerContext symbol_call_inner() {
		Symbol_call_innerContext _localctx = new Symbol_call_innerContext(Context, State);
		EnterRule(_localctx, 20, RULE_symbol_call_inner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(IDENTIFIER);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 96;
				symbol_call_args();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_call_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BroncoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext[] symbol_ref() {
			return GetRuleContexts<Symbol_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref(int i) {
			return GetRuleContext<Symbol_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BroncoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BroncoParser.COMMA, i);
		}
		public Symbol_call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_call_argsContext symbol_call_args() {
		Symbol_call_argsContext _localctx = new Symbol_call_argsContext(Context, State);
		EnterRule(_localctx, 22, RULE_symbol_call_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(COLON);
			State = 100;
			symbol_ref();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 101;
				Match(COMMA);
				State = 102;
				symbol_ref();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META_TAG() { return GetToken(BroncoParser.META_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META_WEIGHT() { return GetToken(BroncoParser.META_WEIGHT, 0); }
		public Meta_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_dataContext meta_data() {
		Meta_dataContext _localctx = new Meta_dataContext(Context, State);
		EnterRule(_localctx, 24, RULE_meta_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.LA(1);
			if ( !(_la==META_TAG || _la==META_WEIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,111,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,4,0,28,8,0,11,0,
		12,0,29,1,0,1,0,1,1,1,1,4,1,36,8,1,11,1,12,1,37,1,1,3,1,41,8,1,1,2,1,2,
		3,2,45,8,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,53,8,3,10,3,12,3,56,9,3,1,4,1,4,
		1,4,3,4,61,8,4,1,4,3,4,64,8,4,1,5,4,5,67,8,5,11,5,12,5,68,1,5,5,5,72,8,
		5,10,5,12,5,75,9,5,1,6,1,6,3,6,79,8,6,1,7,1,7,1,7,3,7,84,8,7,1,7,1,7,1,
		8,1,8,3,8,90,8,8,1,9,1,9,1,9,1,9,1,10,1,10,3,10,98,8,10,1,11,1,11,1,11,
		1,11,5,11,104,8,11,10,11,12,11,107,9,11,1,12,1,12,1,12,0,0,13,0,2,4,6,
		8,10,12,14,16,18,20,22,24,0,1,1,0,18,19,111,0,27,1,0,0,0,2,33,1,0,0,0,
		4,42,1,0,0,0,6,48,1,0,0,0,8,57,1,0,0,0,10,66,1,0,0,0,12,78,1,0,0,0,14,
		80,1,0,0,0,16,89,1,0,0,0,18,91,1,0,0,0,20,95,1,0,0,0,22,99,1,0,0,0,24,
		108,1,0,0,0,26,28,3,2,1,0,27,26,1,0,0,0,28,29,1,0,0,0,29,27,1,0,0,0,29,
		30,1,0,0,0,30,31,1,0,0,0,31,32,5,0,0,1,32,1,1,0,0,0,33,35,3,4,2,0,34,36,
		3,8,4,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,
		1,0,0,0,39,41,5,21,0,0,40,39,1,0,0,0,40,41,1,0,0,0,41,3,1,0,0,0,42,44,
		5,1,0,0,43,45,3,6,3,0,44,43,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,46,47,
		5,16,0,0,47,5,1,0,0,0,48,49,5,12,0,0,49,54,5,14,0,0,50,51,5,13,0,0,51,
		53,5,14,0,0,52,50,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,
		7,1,0,0,0,56,54,1,0,0,0,57,60,3,10,5,0,58,59,5,10,0,0,59,61,3,16,8,0,60,
		58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,64,5,22,0,0,63,62,1,0,0,0,63,
		64,1,0,0,0,64,9,1,0,0,0,65,67,3,12,6,0,66,65,1,0,0,0,67,68,1,0,0,0,68,
		66,1,0,0,0,68,69,1,0,0,0,69,73,1,0,0,0,70,72,3,24,12,0,71,70,1,0,0,0,72,
		75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,11,1,0,0,0,75,73,1,0,0,0,76,
		79,5,20,0,0,77,79,3,14,7,0,78,76,1,0,0,0,78,77,1,0,0,0,79,13,1,0,0,0,80,
		83,5,17,0,0,81,84,3,16,8,0,82,84,3,20,10,0,83,81,1,0,0,0,83,82,1,0,0,0,
		84,85,1,0,0,0,85,86,5,11,0,0,86,15,1,0,0,0,87,90,5,2,0,0,88,90,3,18,9,
		0,89,87,1,0,0,0,89,88,1,0,0,0,90,17,1,0,0,0,91,92,5,8,0,0,92,93,3,20,10,
		0,93,94,5,9,0,0,94,19,1,0,0,0,95,97,5,2,0,0,96,98,3,22,11,0,97,96,1,0,
		0,0,97,98,1,0,0,0,98,21,1,0,0,0,99,100,5,6,0,0,100,105,3,16,8,0,101,102,
		5,7,0,0,102,104,3,16,8,0,103,101,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,
		0,105,106,1,0,0,0,106,23,1,0,0,0,107,105,1,0,0,0,108,109,7,0,0,0,109,25,
		1,0,0,0,14,29,37,40,44,54,60,63,68,73,78,83,89,97,105
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
