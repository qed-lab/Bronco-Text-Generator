//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/ANTLRParser\BroncoLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, BOOL_LITERAL=2, IDENTIFIER=3, NUMBER=4, TEXT_LITERAL=5, SKIP_COMMENT=6, 
		SKIP_WS=7, COLON=8, COMMA=9, OP=10, CP=11, PIPE=12, GT=13, TITLE_COLON=14, 
		TITLE_COMMA=15, TITLE_ID=16, TITLE_SKIP_WS=17, TITLE_NEWLINE=18, LT=19, 
		META_TAG=20, META_WEIGHT=21, TERMINAL=22, EMPTY_LINE=23, NEWLINE=24;
	public const int
		TITLE_MODE=1, TERMINAL_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TITLE_MODE", "TERMINAL_MODE"
	};

	public static readonly string[] ruleNames = {
		"ID", "NUM", "NL", "TITLE", "BOOL_LITERAL", "IDENTIFIER", "NUMBER", "TEXT_LITERAL", 
		"SKIP_COMMENT", "SKIP_WS", "COLON", "COMMA", "OP", "CP", "PIPE", "GT", 
		"TITLE_COLON", "TITLE_COMMA", "TITLE_ID", "TITLE_SKIP_WS", "TITLE_NEWLINE", 
		"LT", "META_TAG", "META_WEIGHT", "TERMINAL", "EMPTY_LINE", "NEWLINE"
	};


	public BroncoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BroncoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "':'", "','", "'('", "')'", 
		"'|'", "'>'", null, null, null, null, null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "BOOL_LITERAL", "IDENTIFIER", "NUMBER", "TEXT_LITERAL", 
		"SKIP_COMMENT", "SKIP_WS", "COLON", "COMMA", "OP", "CP", "PIPE", "GT", 
		"TITLE_COLON", "TITLE_COMMA", "TITLE_ID", "TITLE_SKIP_WS", "TITLE_NEWLINE", 
		"LT", "META_TAG", "META_WEIGHT", "TERMINAL", "EMPTY_LINE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,197,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,
		0,5,0,60,8,0,10,0,12,0,63,9,0,1,1,3,1,66,8,1,1,1,4,1,69,8,1,11,1,12,1,
		70,1,1,1,1,4,1,75,8,1,11,1,12,1,76,3,1,79,8,1,1,2,3,2,82,8,2,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,100,8,4,1,5,
		1,5,1,6,1,6,1,7,1,7,5,7,108,8,7,10,7,12,7,111,9,7,1,7,1,7,1,8,1,8,1,8,
		1,8,4,8,119,8,8,11,8,12,8,120,1,8,1,8,1,8,1,8,1,8,1,9,4,9,129,8,9,11,9,
		12,9,130,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
		1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,156,8,19,11,19,
		12,19,157,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,
		1,22,1,22,1,22,3,22,175,8,22,1,23,1,23,1,23,1,24,4,24,181,8,24,11,24,12,
		24,182,1,25,1,25,5,25,187,8,25,10,25,12,25,190,9,25,1,25,1,25,1,25,1,25,
		1,26,1,26,1,109,0,27,3,0,5,0,7,0,9,1,11,2,13,3,15,4,17,5,19,6,21,7,23,
		8,25,9,27,10,29,11,31,12,33,13,35,14,37,15,39,16,41,17,43,18,45,19,47,
		20,49,21,51,22,53,23,55,24,3,0,1,2,7,2,0,65,90,97,122,4,0,48,57,65,90,
		95,95,97,122,1,0,48,57,1,0,42,42,3,0,9,10,13,13,32,32,2,0,9,9,32,32,5,
		0,10,10,13,13,35,35,37,37,60,60,205,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,
		0,0,0,1,37,1,0,0,0,1,39,1,0,0,0,1,41,1,0,0,0,1,43,1,0,0,0,2,45,1,0,0,0,
		2,47,1,0,0,0,2,49,1,0,0,0,2,51,1,0,0,0,2,53,1,0,0,0,2,55,1,0,0,0,3,57,
		1,0,0,0,5,65,1,0,0,0,7,81,1,0,0,0,9,85,1,0,0,0,11,99,1,0,0,0,13,101,1,
		0,0,0,15,103,1,0,0,0,17,105,1,0,0,0,19,114,1,0,0,0,21,128,1,0,0,0,23,134,
		1,0,0,0,25,136,1,0,0,0,27,138,1,0,0,0,29,140,1,0,0,0,31,142,1,0,0,0,33,
		144,1,0,0,0,35,148,1,0,0,0,37,150,1,0,0,0,39,152,1,0,0,0,41,155,1,0,0,
		0,43,161,1,0,0,0,45,165,1,0,0,0,47,169,1,0,0,0,49,176,1,0,0,0,51,180,1,
		0,0,0,53,184,1,0,0,0,55,195,1,0,0,0,57,61,7,0,0,0,58,60,7,1,0,0,59,58,
		1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,4,1,0,0,0,63,61,1,
		0,0,0,64,66,5,45,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,69,7,
		2,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,78,1,
		0,0,0,72,74,5,46,0,0,73,75,7,2,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,
		0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,72,1,0,0,0,78,79,1,0,0,0,79,6,1,0,
		0,0,80,82,5,13,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,84,5,10,
		0,0,84,8,1,0,0,0,85,86,5,64,0,0,86,87,3,3,0,0,87,88,1,0,0,0,88,89,6,3,
		0,0,89,10,1,0,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,117,0,0,93,100,
		5,101,0,0,94,95,5,102,0,0,95,96,5,97,0,0,96,97,5,108,0,0,97,98,5,115,0,
		0,98,100,5,101,0,0,99,90,1,0,0,0,99,94,1,0,0,0,100,12,1,0,0,0,101,102,
		3,3,0,0,102,14,1,0,0,0,103,104,3,5,1,0,104,16,1,0,0,0,105,109,5,39,0,0,
		106,108,9,0,0,0,107,106,1,0,0,0,108,111,1,0,0,0,109,110,1,0,0,0,109,107,
		1,0,0,0,110,112,1,0,0,0,111,109,1,0,0,0,112,113,5,39,0,0,113,18,1,0,0,
		0,114,115,5,47,0,0,115,116,5,42,0,0,116,118,1,0,0,0,117,119,8,3,0,0,118,
		117,1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,122,1,
		0,0,0,122,123,5,42,0,0,123,124,5,47,0,0,124,125,1,0,0,0,125,126,6,8,1,
		0,126,20,1,0,0,0,127,129,7,4,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,
		1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,6,9,1,0,133,22,1,0,0,0,
		134,135,5,58,0,0,135,24,1,0,0,0,136,137,5,44,0,0,137,26,1,0,0,0,138,139,
		5,40,0,0,139,28,1,0,0,0,140,141,5,41,0,0,141,30,1,0,0,0,142,143,5,124,
		0,0,143,32,1,0,0,0,144,145,5,62,0,0,145,146,1,0,0,0,146,147,6,15,2,0,147,
		34,1,0,0,0,148,149,3,23,10,0,149,36,1,0,0,0,150,151,3,25,11,0,151,38,1,
		0,0,0,152,153,3,3,0,0,153,40,1,0,0,0,154,156,7,5,0,0,155,154,1,0,0,0,156,
		157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,6,
		19,1,0,160,42,1,0,0,0,161,162,3,7,2,0,162,163,1,0,0,0,163,164,6,20,2,0,
		164,44,1,0,0,0,165,166,5,60,0,0,166,167,1,0,0,0,167,168,6,21,3,0,168,46,
		1,0,0,0,169,170,5,35,0,0,170,174,3,3,0,0,171,172,3,23,10,0,172,173,3,5,
		1,0,173,175,1,0,0,0,174,171,1,0,0,0,174,175,1,0,0,0,175,48,1,0,0,0,176,
		177,5,37,0,0,177,178,3,5,1,0,178,50,1,0,0,0,179,181,8,6,0,0,180,179,1,
		0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,52,1,0,0,0,184,
		188,3,7,2,0,185,187,7,5,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,
		0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,192,3,7,2,0,
		192,193,1,0,0,0,193,194,6,25,3,0,194,54,1,0,0,0,195,196,3,7,2,0,196,56,
		1,0,0,0,17,0,1,2,61,65,70,76,78,81,99,109,120,130,157,174,182,188,4,2,
		1,0,6,0,0,2,2,0,2,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
