//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/ANTLRParser\BroncoLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, BOOL_LITERAL=2, IDENTIFIER=3, NUMBER=4, SKIP_COMMENT=5, SKIP_WS=6, 
		COLON=7, COMMA=8, OP=9, CP=10, GT=11, START_QUOTE=12, CLOSE_SQUARE=13, 
		DOLLAR=14, EQUALS=15, QUESTION_MARK=16, SEMI_COLON=17, TITLE_COLON=18, 
		TITLE_COMMA=19, TITLE_ID=20, TITLE_SKIP_WS=21, TITLE_OPEN_SQUARE=22, TITLE_NEWLINE=23, 
		LT=24, META_TAG=25, META_WEIGHT=26, TERMINAL=27, END_QUOTE=28, EMPTY_LINE=29, 
		NEWLINE=30, PIPE=31, TERMINAL_OPEN_SQUARE=32;
	public const int
		TITLE_MODE=1, TERMINAL_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TITLE_MODE", "TERMINAL_MODE"
	};

	public static readonly string[] ruleNames = {
		"ID", "NUM", "NL", "TITLE", "BOOL_LITERAL", "IDENTIFIER", "NUMBER", "SKIP_COMMENT", 
		"SKIP_WS", "COLON", "COMMA", "OP", "CP", "GT", "START_QUOTE", "CLOSE_SQUARE", 
		"DOLLAR", "EQUALS", "QUESTION_MARK", "SEMI_COLON", "TITLE_COLON", "TITLE_COMMA", 
		"TITLE_ID", "TITLE_SKIP_WS", "TITLE_OPEN_SQUARE", "TITLE_NEWLINE", "LT", 
		"META_TAG", "META_WEIGHT", "TERMINAL", "END_QUOTE", "EMPTY_LINE", "NEWLINE", 
		"PIPE", "TERMINAL_OPEN_SQUARE"
	};


	public BroncoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BroncoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "':'", "','", "'('", "')'", 
		"'>'", null, "']'", "'$'", "'='", "'?'", "';'", null, null, null, null, 
		null, null, "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "BOOL_LITERAL", "IDENTIFIER", "NUMBER", "SKIP_COMMENT", 
		"SKIP_WS", "COLON", "COMMA", "OP", "CP", "GT", "START_QUOTE", "CLOSE_SQUARE", 
		"DOLLAR", "EQUALS", "QUESTION_MARK", "SEMI_COLON", "TITLE_COLON", "TITLE_COMMA", 
		"TITLE_ID", "TITLE_SKIP_WS", "TITLE_OPEN_SQUARE", "TITLE_NEWLINE", "LT", 
		"META_TAG", "META_WEIGHT", "TERMINAL", "END_QUOTE", "EMPTY_LINE", "NEWLINE", 
		"PIPE", "TERMINAL_OPEN_SQUARE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,245,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
		7,34,1,0,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,1,3,1,82,8,1,1,1,4,1,85,8,1,
		11,1,12,1,86,1,1,1,1,4,1,91,8,1,11,1,12,1,92,3,1,95,8,1,1,2,3,2,98,8,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,116,
		8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,4,7,126,8,7,11,7,12,7,127,1,7,1,7,
		1,7,1,7,1,7,1,8,4,8,136,8,8,11,8,12,8,137,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
		22,1,22,1,23,4,23,177,8,23,11,23,12,23,178,1,23,1,23,1,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,
		27,200,8,27,1,27,5,27,203,8,27,10,27,12,27,206,9,27,1,28,1,28,1,28,5,28,
		211,8,28,10,28,12,28,214,9,28,1,29,4,29,217,8,29,11,29,12,29,218,1,30,
		1,30,1,30,1,30,1,31,1,31,5,31,227,8,31,10,31,12,31,230,9,31,1,31,1,31,
		1,31,1,31,1,32,1,32,1,33,1,33,3,33,240,8,33,1,34,1,34,1,34,1,34,0,0,35,
		3,0,5,0,7,0,9,1,11,2,13,3,15,4,17,5,19,6,21,7,23,8,25,9,27,10,29,11,31,
		12,33,13,35,14,37,15,39,16,41,17,43,18,45,19,47,20,49,21,51,22,53,23,55,
		24,57,25,59,26,61,27,63,28,65,29,67,30,69,31,71,32,3,0,1,2,7,2,0,65,90,
		97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,42,42,3,0,9,10,13,13,
		32,32,2,0,9,9,32,32,8,0,10,10,13,13,35,35,37,37,60,60,91,91,96,96,124,
		124,255,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,1,43,1,0,0,0,1,45,1,0,0,0,1,47,1,0,0,0,1,49,1,0,0,0,1,51,
		1,0,0,0,1,53,1,0,0,0,2,55,1,0,0,0,2,57,1,0,0,0,2,59,1,0,0,0,2,61,1,0,0,
		0,2,63,1,0,0,0,2,65,1,0,0,0,2,67,1,0,0,0,2,69,1,0,0,0,2,71,1,0,0,0,3,73,
		1,0,0,0,5,81,1,0,0,0,7,97,1,0,0,0,9,101,1,0,0,0,11,115,1,0,0,0,13,117,
		1,0,0,0,15,119,1,0,0,0,17,121,1,0,0,0,19,135,1,0,0,0,21,141,1,0,0,0,23,
		143,1,0,0,0,25,145,1,0,0,0,27,147,1,0,0,0,29,149,1,0,0,0,31,153,1,0,0,
		0,33,157,1,0,0,0,35,161,1,0,0,0,37,163,1,0,0,0,39,165,1,0,0,0,41,167,1,
		0,0,0,43,169,1,0,0,0,45,171,1,0,0,0,47,173,1,0,0,0,49,176,1,0,0,0,51,182,
		1,0,0,0,53,186,1,0,0,0,55,190,1,0,0,0,57,194,1,0,0,0,59,207,1,0,0,0,61,
		216,1,0,0,0,63,220,1,0,0,0,65,224,1,0,0,0,67,235,1,0,0,0,69,237,1,0,0,
		0,71,241,1,0,0,0,73,77,7,0,0,0,74,76,7,1,0,0,75,74,1,0,0,0,76,79,1,0,0,
		0,77,75,1,0,0,0,77,78,1,0,0,0,78,4,1,0,0,0,79,77,1,0,0,0,80,82,5,45,0,
		0,81,80,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,85,7,2,0,0,84,83,1,0,0,
		0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,94,1,0,0,0,88,90,5,46,0,
		0,89,91,7,2,0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,
		0,93,95,1,0,0,0,94,88,1,0,0,0,94,95,1,0,0,0,95,6,1,0,0,0,96,98,5,13,0,
		0,97,96,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,5,10,0,0,100,8,1,0,
		0,0,101,102,5,64,0,0,102,103,3,3,0,0,103,104,1,0,0,0,104,105,6,3,0,0,105,
		10,1,0,0,0,106,107,5,116,0,0,107,108,5,114,0,0,108,109,5,117,0,0,109,116,
		5,101,0,0,110,111,5,102,0,0,111,112,5,97,0,0,112,113,5,108,0,0,113,114,
		5,115,0,0,114,116,5,101,0,0,115,106,1,0,0,0,115,110,1,0,0,0,116,12,1,0,
		0,0,117,118,3,3,0,0,118,14,1,0,0,0,119,120,3,5,1,0,120,16,1,0,0,0,121,
		122,5,47,0,0,122,123,5,42,0,0,123,125,1,0,0,0,124,126,8,3,0,0,125,124,
		1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,
		0,129,130,5,42,0,0,130,131,5,47,0,0,131,132,1,0,0,0,132,133,6,7,1,0,133,
		18,1,0,0,0,134,136,7,4,0,0,135,134,1,0,0,0,136,137,1,0,0,0,137,135,1,0,
		0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,140,6,8,1,0,140,20,1,0,0,0,141,
		142,5,58,0,0,142,22,1,0,0,0,143,144,5,44,0,0,144,24,1,0,0,0,145,146,5,
		40,0,0,146,26,1,0,0,0,147,148,5,41,0,0,148,28,1,0,0,0,149,150,5,62,0,0,
		150,151,1,0,0,0,151,152,6,13,2,0,152,30,1,0,0,0,153,154,5,96,0,0,154,155,
		1,0,0,0,155,156,6,14,2,0,156,32,1,0,0,0,157,158,5,93,0,0,158,159,1,0,0,
		0,159,160,6,15,3,0,160,34,1,0,0,0,161,162,5,36,0,0,162,36,1,0,0,0,163,
		164,5,61,0,0,164,38,1,0,0,0,165,166,5,63,0,0,166,40,1,0,0,0,167,168,5,
		59,0,0,168,42,1,0,0,0,169,170,3,21,9,0,170,44,1,0,0,0,171,172,3,23,10,
		0,172,46,1,0,0,0,173,174,3,3,0,0,174,48,1,0,0,0,175,177,7,5,0,0,176,175,
		1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,
		0,180,181,6,23,1,0,181,50,1,0,0,0,182,183,5,91,0,0,183,184,1,0,0,0,184,
		185,6,24,4,0,185,52,1,0,0,0,186,187,3,7,2,0,187,188,1,0,0,0,188,189,6,
		25,2,0,189,54,1,0,0,0,190,191,5,60,0,0,191,192,1,0,0,0,192,193,6,26,5,
		0,193,56,1,0,0,0,194,195,5,35,0,0,195,199,3,3,0,0,196,197,3,21,9,0,197,
		198,3,5,1,0,198,200,1,0,0,0,199,196,1,0,0,0,199,200,1,0,0,0,200,204,1,
		0,0,0,201,203,7,5,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,
		204,205,1,0,0,0,205,58,1,0,0,0,206,204,1,0,0,0,207,208,5,37,0,0,208,212,
		3,5,1,0,209,211,7,5,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,
		0,212,213,1,0,0,0,213,60,1,0,0,0,214,212,1,0,0,0,215,217,8,6,0,0,216,215,
		1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,62,1,0,0,0,
		220,221,5,96,0,0,221,222,1,0,0,0,222,223,6,30,5,0,223,64,1,0,0,0,224,228,
		3,7,2,0,225,227,7,5,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,
		0,228,229,1,0,0,0,229,231,1,0,0,0,230,228,1,0,0,0,231,232,3,7,2,0,232,
		233,1,0,0,0,233,234,6,31,5,0,234,66,1,0,0,0,235,236,3,7,2,0,236,68,1,0,
		0,0,237,239,5,124,0,0,238,240,5,32,0,0,239,238,1,0,0,0,239,240,1,0,0,0,
		240,70,1,0,0,0,241,242,5,91,0,0,242,243,1,0,0,0,243,244,6,34,4,0,244,72,
		1,0,0,0,19,0,1,2,77,81,86,92,94,97,115,127,137,178,199,204,212,218,228,
		239,6,2,1,0,6,0,0,2,2,0,4,0,0,5,0,0,2,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
