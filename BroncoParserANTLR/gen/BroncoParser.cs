//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/BroncoParserANTLR\BroncoParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AT=1, ID=2, COLON=3, COMMA=4, TILDA=5, PIPE=6, TERMINAL=7, LT=8, GT=9, 
		HASH=10, FLOAT=11, PERCENT=12;
	public const int
		RULE_file = 0, RULE_bag = 1, RULE_bag_title = 2, RULE_bag_args = 3, RULE_bag_item = 4, 
		RULE_symbol = 5, RULE_symbol_list_item = 6, RULE_symbol_call = 7, RULE_symbol_call_args = 8, 
		RULE_symbol_ref = 9, RULE_meta_data = 10, RULE_meta_tag = 11, RULE_meta_weight = 12;
	public static readonly string[] ruleNames = {
		"file", "bag", "bag_title", "bag_args", "bag_item", "symbol", "symbol_list_item", 
		"symbol_call", "symbol_call_args", "symbol_ref", "meta_data", "meta_tag", 
		"meta_weight"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "AT", "ID", "COLON", "COMMA", "TILDA", "PIPE", "TERMINAL", "LT", 
		"GT", "HASH", "FLOAT", "PERCENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BroncoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BroncoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BroncoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BagContext[] bag() {
			return GetRuleContexts<BagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BagContext bag(int i) {
			return GetRuleContext<BagContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				bag();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT );
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bag_titleContext bag_title() {
			return GetRuleContext<Bag_titleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext[] bag_item() {
			return GetRuleContexts<Bag_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext bag_item(int i) {
			return GetRuleContext<Bag_itemContext>(i);
		}
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 2, RULE_bag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			bag_title();
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34;
				bag_item();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TILDA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_titleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BroncoParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BroncoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bag_argsContext bag_args() {
			return GetRuleContext<Bag_argsContext>(0);
		}
		public Bag_titleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_title(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_titleContext bag_title() {
		Bag_titleContext _localctx = new Bag_titleContext(Context, State);
		EnterRule(_localctx, 4, RULE_bag_title);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(AT);
			State = 40;
			Match(ID);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 41;
				bag_args();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BroncoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(BroncoParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(BroncoParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BroncoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BroncoParser.COMMA, i);
		}
		public Bag_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_argsContext bag_args() {
		Bag_argsContext _localctx = new Bag_argsContext(Context, State);
		EnterRule(_localctx, 6, RULE_bag_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(COLON);
			State = 45;
			Match(ID);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 46;
				Match(COMMA);
				State = 47;
				Match(ID);
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDA() { return GetToken(BroncoParser.TILDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(BroncoParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		public Bag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_itemContext bag_item() {
		Bag_itemContext _localctx = new Bag_itemContext(Context, State);
		EnterRule(_localctx, 8, RULE_bag_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(TILDA);
			State = 54;
			symbol();
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PIPE) {
				{
				State = 55;
				Match(PIPE);
				State = 56;
				symbol_ref();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_list_itemContext[] symbol_list_item() {
			return GetRuleContexts<Symbol_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_list_itemContext symbol_list_item(int i) {
			return GetRuleContext<Symbol_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext[] meta_data() {
			return GetRuleContexts<Meta_dataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext meta_data(int i) {
			return GetRuleContext<Meta_dataContext>(i);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 59;
				symbol_list_item();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << TERMINAL) | (1L << LT))) != 0) );
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH || _la==PERCENT) {
				{
				{
				State = 64;
				meta_data();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL() { return GetToken(BroncoParser.TERMINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		public Symbol_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_list_itemContext symbol_list_item() {
		Symbol_list_itemContext _localctx = new Symbol_list_itemContext(Context, State);
		EnterRule(_localctx, 12, RULE_symbol_list_item);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				Match(TERMINAL);
				}
				break;
			case ID:
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				symbol_ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BroncoParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BroncoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BroncoParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_call_argsContext symbol_call_args() {
			return GetRuleContext<Symbol_call_argsContext>(0);
		}
		public Symbol_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_callContext symbol_call() {
		Symbol_callContext _localctx = new Symbol_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(LT);
			State = 75;
			Match(ID);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 76;
				symbol_call_args();
				}
			}

			State = 79;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_call_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BroncoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext[] symbol_ref() {
			return GetRuleContexts<Symbol_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref(int i) {
			return GetRuleContext<Symbol_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BroncoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BroncoParser.COMMA, i);
		}
		public Symbol_call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_call_argsContext symbol_call_args() {
		Symbol_call_argsContext _localctx = new Symbol_call_argsContext(Context, State);
		EnterRule(_localctx, 16, RULE_symbol_call_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(COLON);
			State = 82;
			symbol_ref();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 83;
				Match(COMMA);
				State = 84;
				symbol_ref();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BroncoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_callContext symbol_call() {
			return GetRuleContext<Symbol_callContext>(0);
		}
		public Symbol_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_refContext symbol_ref() {
		Symbol_refContext _localctx = new Symbol_refContext(Context, State);
		EnterRule(_localctx, 18, RULE_symbol_ref);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(ID);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				symbol_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Meta_tagContext meta_tag() {
			return GetRuleContext<Meta_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_weightContext meta_weight() {
			return GetRuleContext<Meta_weightContext>(0);
		}
		public Meta_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_dataContext meta_data() {
		Meta_dataContext _localctx = new Meta_dataContext(Context, State);
		EnterRule(_localctx, 20, RULE_meta_data);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				meta_tag();
				}
				break;
			case PERCENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				meta_weight();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(BroncoParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BroncoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BroncoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(BroncoParser.FLOAT, 0); }
		public Meta_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_tagContext meta_tag() {
		Meta_tagContext _localctx = new Meta_tagContext(Context, State);
		EnterRule(_localctx, 22, RULE_meta_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(HASH);
			State = 99;
			Match(ID);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 100;
				Match(COLON);
				State = 101;
				Match(FLOAT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_weightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BroncoParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(BroncoParser.FLOAT, 0); }
		public Meta_weightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_weight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_weightContext meta_weight() {
		Meta_weightContext _localctx = new Meta_weightContext(Context, State);
		EnterRule(_localctx, 24, RULE_meta_weight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(PERCENT);
			State = 105;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,108,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,4,0,28,8,0,11,0,
		12,0,29,1,0,1,0,1,1,1,1,4,1,36,8,1,11,1,12,1,37,1,2,1,2,1,2,3,2,43,8,2,
		1,3,1,3,1,3,1,3,5,3,49,8,3,10,3,12,3,52,9,3,1,4,1,4,1,4,1,4,3,4,58,8,4,
		1,5,4,5,61,8,5,11,5,12,5,62,1,5,5,5,66,8,5,10,5,12,5,69,9,5,1,6,1,6,3,
		6,73,8,6,1,7,1,7,1,7,3,7,78,8,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,86,8,8,10,
		8,12,8,89,9,8,1,9,1,9,3,9,93,8,9,1,10,1,10,3,10,97,8,10,1,11,1,11,1,11,
		1,11,3,11,103,8,11,1,12,1,12,1,12,1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,
		20,22,24,0,0,107,0,27,1,0,0,0,2,33,1,0,0,0,4,39,1,0,0,0,6,44,1,0,0,0,8,
		53,1,0,0,0,10,60,1,0,0,0,12,72,1,0,0,0,14,74,1,0,0,0,16,81,1,0,0,0,18,
		92,1,0,0,0,20,96,1,0,0,0,22,98,1,0,0,0,24,104,1,0,0,0,26,28,3,2,1,0,27,
		26,1,0,0,0,28,29,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,31,1,0,0,0,31,
		32,5,0,0,1,32,1,1,0,0,0,33,35,3,4,2,0,34,36,3,8,4,0,35,34,1,0,0,0,36,37,
		1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,3,1,0,0,0,39,40,5,1,0,0,40,42,5,
		2,0,0,41,43,3,6,3,0,42,41,1,0,0,0,42,43,1,0,0,0,43,5,1,0,0,0,44,45,5,3,
		0,0,45,50,5,2,0,0,46,47,5,4,0,0,47,49,5,2,0,0,48,46,1,0,0,0,49,52,1,0,
		0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,7,1,0,0,0,52,50,1,0,0,0,53,54,5,5,0,
		0,54,57,3,10,5,0,55,56,5,6,0,0,56,58,3,18,9,0,57,55,1,0,0,0,57,58,1,0,
		0,0,58,9,1,0,0,0,59,61,3,12,6,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,
		0,0,62,63,1,0,0,0,63,67,1,0,0,0,64,66,3,20,10,0,65,64,1,0,0,0,66,69,1,
		0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,11,1,0,0,0,69,67,1,0,0,0,70,73,5,
		7,0,0,71,73,3,18,9,0,72,70,1,0,0,0,72,71,1,0,0,0,73,13,1,0,0,0,74,75,5,
		8,0,0,75,77,5,2,0,0,76,78,3,16,8,0,77,76,1,0,0,0,77,78,1,0,0,0,78,79,1,
		0,0,0,79,80,5,9,0,0,80,15,1,0,0,0,81,82,5,3,0,0,82,87,3,18,9,0,83,84,5,
		4,0,0,84,86,3,18,9,0,85,83,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,
		0,0,0,88,17,1,0,0,0,89,87,1,0,0,0,90,93,5,2,0,0,91,93,3,14,7,0,92,90,1,
		0,0,0,92,91,1,0,0,0,93,19,1,0,0,0,94,97,3,22,11,0,95,97,3,24,12,0,96,94,
		1,0,0,0,96,95,1,0,0,0,97,21,1,0,0,0,98,99,5,10,0,0,99,102,5,2,0,0,100,
		101,5,3,0,0,101,103,5,11,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,23,1,
		0,0,0,104,105,5,12,0,0,105,106,5,11,0,0,106,25,1,0,0,0,13,29,37,42,50,
		57,62,67,72,77,87,92,96,102
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
