//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/BroncoParserANTLR\ExplicitBroncoGrammar.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ExplicitBroncoGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ID=1, TERMINAL=2, FLOAT=3, INT=4, WS=5, AT=6, HASH=7, PERCENT=8, COLON=9, 
		COMMA=10, LT=11, GT=12, TILDA=13, PIPE=14;
	public const int
		RULE_start = 0, RULE_file = 1, RULE_bag = 2, RULE_bag_title = 3, RULE_bag_args = 4, 
		RULE_bag_item = 5, RULE_symbol = 6, RULE_symbol_call = 7, RULE_symbol_call_args = 8, 
		RULE_symbol_ref = 9, RULE_meta_data = 10, RULE_meta_tag = 11, RULE_meta_weight = 12;
	public static readonly string[] ruleNames = {
		"start", "file", "bag", "bag_title", "bag_args", "bag_item", "symbol", 
		"symbol_call", "symbol_call_args", "symbol_ref", "meta_data", "meta_tag", 
		"meta_weight"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'@'", "'#'", "'%'", "':'", "','", 
		"'<'", "'>'", "'~'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "TERMINAL", "FLOAT", "INT", "WS", "AT", "HASH", "PERCENT", 
		"COLON", "COMMA", "LT", "GT", "TILDA", "PIPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExplicitBroncoGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExplicitBroncoGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExplicitBroncoGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExplicitBroncoGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			file();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExplicitBroncoGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BagContext[] bag() {
			return GetRuleContexts<BagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BagContext bag(int i) {
			return GetRuleContext<BagContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 2, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 28;
				bag();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT );
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bag_titleContext bag_title() {
			return GetRuleContext<Bag_titleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext[] bag_item() {
			return GetRuleContexts<Bag_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_itemContext bag_item(int i) {
			return GetRuleContext<Bag_itemContext>(i);
		}
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 4, RULE_bag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			bag_title();
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				bag_item();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TILDA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_titleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ExplicitBroncoGrammarParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExplicitBroncoGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bag_argsContext bag_args() {
			return GetRuleContext<Bag_argsContext>(0);
		}
		public Bag_titleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_title(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_titleContext bag_title() {
		Bag_titleContext _localctx = new Bag_titleContext(Context, State);
		EnterRule(_localctx, 6, RULE_bag_title);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(AT);
			State = 42;
			Match(ID);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 43;
				bag_args();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ExplicitBroncoGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ExplicitBroncoGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ExplicitBroncoGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExplicitBroncoGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExplicitBroncoGrammarParser.COMMA, i);
		}
		public Bag_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_argsContext bag_args() {
		Bag_argsContext _localctx = new Bag_argsContext(Context, State);
		EnterRule(_localctx, 8, RULE_bag_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(COLON);
			State = 47;
			Match(ID);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 48;
				Match(COMMA);
				State = 49;
				Match(ID);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDA() { return GetToken(ExplicitBroncoGrammarParser.TILDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(ExplicitBroncoGrammarParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		public Bag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_itemContext bag_item() {
		Bag_itemContext _localctx = new Bag_itemContext(Context, State);
		EnterRule(_localctx, 10, RULE_bag_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(TILDA);
			State = 56;
			symbol();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PIPE) {
				{
				State = 57;
				Match(PIPE);
				State = 58;
				symbol_ref();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERMINAL() { return GetTokens(ExplicitBroncoGrammarParser.TERMINAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL(int i) {
			return GetToken(ExplicitBroncoGrammarParser.TERMINAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext[] symbol_ref() {
			return GetRuleContexts<Symbol_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref(int i) {
			return GetRuleContext<Symbol_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext[] meta_data() {
			return GetRuleContexts<Meta_dataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext meta_data(int i) {
			return GetRuleContext<Meta_dataContext>(i);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 12, RULE_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TERMINAL:
					{
					State = 61;
					Match(TERMINAL);
					}
					break;
				case ID:
				case LT:
					{
					State = 62;
					symbol_ref();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << TERMINAL) | (1L << LT))) != 0) );
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH || _la==PERCENT) {
				{
				{
				State = 67;
				meta_data();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ExplicitBroncoGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref() {
			return GetRuleContext<Symbol_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ExplicitBroncoGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_call_argsContext symbol_call_args() {
			return GetRuleContext<Symbol_call_argsContext>(0);
		}
		public Symbol_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_callContext symbol_call() {
		Symbol_callContext _localctx = new Symbol_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(LT);
			State = 74;
			symbol_ref();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 75;
				symbol_call_args();
				}
			}

			State = 78;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_call_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ExplicitBroncoGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext[] symbol_ref() {
			return GetRuleContexts<Symbol_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_refContext symbol_ref(int i) {
			return GetRuleContext<Symbol_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExplicitBroncoGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExplicitBroncoGrammarParser.COMMA, i);
		}
		public Symbol_call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_call_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_call_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_call_argsContext symbol_call_args() {
		Symbol_call_argsContext _localctx = new Symbol_call_argsContext(Context, State);
		EnterRule(_localctx, 16, RULE_symbol_call_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(COLON);
			State = 81;
			symbol_ref();
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 82;
				Match(COMMA);
				State = 83;
				symbol_ref();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExplicitBroncoGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_callContext symbol_call() {
			return GetRuleContext<Symbol_callContext>(0);
		}
		public Symbol_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_refContext symbol_ref() {
		Symbol_refContext _localctx = new Symbol_refContext(Context, State);
		EnterRule(_localctx, 18, RULE_symbol_ref);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				Match(ID);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				symbol_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Meta_tagContext meta_tag() {
			return GetRuleContext<Meta_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_weightContext meta_weight() {
			return GetRuleContext<Meta_weightContext>(0);
		}
		public Meta_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_dataContext meta_data() {
		Meta_dataContext _localctx = new Meta_dataContext(Context, State);
		EnterRule(_localctx, 20, RULE_meta_data);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				meta_tag();
				}
				break;
			case PERCENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				meta_weight();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(ExplicitBroncoGrammarParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExplicitBroncoGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ExplicitBroncoGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ExplicitBroncoGrammarParser.FLOAT, 0); }
		public Meta_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_tagContext meta_tag() {
		Meta_tagContext _localctx = new Meta_tagContext(Context, State);
		EnterRule(_localctx, 22, RULE_meta_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(HASH);
			State = 98;
			Match(ID);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 99;
				Match(COLON);
				State = 100;
				Match(FLOAT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_weightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(ExplicitBroncoGrammarParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ExplicitBroncoGrammarParser.FLOAT, 0); }
		public Meta_weightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExplicitBroncoGrammarVisitor<TResult> typedVisitor = visitor as IExplicitBroncoGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_weight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_weightContext meta_weight() {
		Meta_weightContext _localctx = new Meta_weightContext(Context, State);
		EnterRule(_localctx, 24, RULE_meta_weight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(PERCENT);
			State = 104;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,107,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,4,1,30,8,
		1,11,1,12,1,31,1,1,1,1,1,2,1,2,4,2,38,8,2,11,2,12,2,39,1,3,1,3,1,3,3,3,
		45,8,3,1,4,1,4,1,4,1,4,5,4,51,8,4,10,4,12,4,54,9,4,1,5,1,5,1,5,1,5,3,5,
		60,8,5,1,6,1,6,4,6,64,8,6,11,6,12,6,65,1,6,5,6,69,8,6,10,6,12,6,72,9,6,
		1,7,1,7,1,7,3,7,77,8,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,85,8,8,10,8,12,8,88,
		9,8,1,9,1,9,3,9,92,8,9,1,10,1,10,3,10,96,8,10,1,11,1,11,1,11,1,11,3,11,
		102,8,11,1,12,1,12,1,12,1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,
		0,0,106,0,26,1,0,0,0,2,29,1,0,0,0,4,35,1,0,0,0,6,41,1,0,0,0,8,46,1,0,0,
		0,10,55,1,0,0,0,12,63,1,0,0,0,14,73,1,0,0,0,16,80,1,0,0,0,18,91,1,0,0,
		0,20,95,1,0,0,0,22,97,1,0,0,0,24,103,1,0,0,0,26,27,3,2,1,0,27,1,1,0,0,
		0,28,30,3,4,2,0,29,28,1,0,0,0,30,31,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,
		0,32,33,1,0,0,0,33,34,5,0,0,1,34,3,1,0,0,0,35,37,3,6,3,0,36,38,3,10,5,
		0,37,36,1,0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,5,1,0,0,0,
		41,42,5,6,0,0,42,44,5,1,0,0,43,45,3,8,4,0,44,43,1,0,0,0,44,45,1,0,0,0,
		45,7,1,0,0,0,46,47,5,9,0,0,47,52,5,1,0,0,48,49,5,10,0,0,49,51,5,1,0,0,
		50,48,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,9,1,0,0,0,54,
		52,1,0,0,0,55,56,5,13,0,0,56,59,3,12,6,0,57,58,5,14,0,0,58,60,3,18,9,0,
		59,57,1,0,0,0,59,60,1,0,0,0,60,11,1,0,0,0,61,64,5,2,0,0,62,64,3,18,9,0,
		63,61,1,0,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,
		66,70,1,0,0,0,67,69,3,20,10,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,
		0,70,71,1,0,0,0,71,13,1,0,0,0,72,70,1,0,0,0,73,74,5,11,0,0,74,76,3,18,
		9,0,75,77,3,16,8,0,76,75,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,5,12,
		0,0,79,15,1,0,0,0,80,81,5,9,0,0,81,86,3,18,9,0,82,83,5,10,0,0,83,85,3,
		18,9,0,84,82,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,17,1,
		0,0,0,88,86,1,0,0,0,89,92,5,1,0,0,90,92,3,14,7,0,91,89,1,0,0,0,91,90,1,
		0,0,0,92,19,1,0,0,0,93,96,3,22,11,0,94,96,3,24,12,0,95,93,1,0,0,0,95,94,
		1,0,0,0,96,21,1,0,0,0,97,98,5,7,0,0,98,101,5,1,0,0,99,100,5,9,0,0,100,
		102,5,3,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,23,1,0,0,0,103,104,5,8,
		0,0,104,105,5,3,0,0,105,25,1,0,0,0,13,31,39,44,52,59,63,65,70,76,86,91,
		95,101
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
