//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\angry\source\repos\BroncoLibrary\BroncoParser\broncoLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class broncoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE_OPEN=1, TITLE_TEXT=2, TITLE_CLOSE=3, IGNORE=4, CALL_OPEN=5, TERMINAL=6, 
		CALL_INNER=7, CALL_CLOSE=8;
	public const int
		ITEM=1, CALL=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "ITEM", "CALL"
	};

	public static readonly string[] ruleNames = {
		"LOWER", "UPPER", "DIGIT", "ID", "WHITESPACE", "NEWLINE", "TITLE_OPEN", 
		"TITLE_TEXT", "TITLE_CLOSE", "IGNORE", "CALL_OPEN", "TERMINAL", "CALL_INNER", 
		"CALL_CLOSE"
	};


	public broncoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public broncoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'<'", null, null, "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE_OPEN", "TITLE_TEXT", "TITLE_CLOSE", "IGNORE", "CALL_OPEN", 
		"TERMINAL", "CALL_INNER", "CALL_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "broncoLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static broncoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', 'v', '\b', '\x1', '\b', '\x1', '\b', '\x1', '\x4', 
		'\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', 
		'\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', 
		'\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', 
		'\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', 
		'\r', '\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '*', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x30', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x33', '\v', '\x5', '\x3', '\x6', '\x6', '\x6', 
		'\x36', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x37', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '=', '\n', '\a', '\x3', '\b', '\a', '\b', 
		'@', '\n', '\b', '\f', '\b', '\xE', '\b', '\x43', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', 'G', '\n', '\b', '\f', '\b', '\xE', '\b', 'J', 
		'\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', 'O', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'R', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', 'V', '\n', '\n', '\f', '\n', '\xE', '\n', 'Y', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x61', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', 
		'j', '\n', '\r', '\r', '\r', '\xE', '\r', 'k', '\x3', '\xE', '\x6', '\xE', 
		'o', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'p', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x5', '\x2', 
		'\a', '\x2', '\t', '\x2', '\v', '\x2', '\r', '\x2', '\xF', '\x2', '\x11', 
		'\x3', '\x13', '\x4', '\x15', '\x5', '\x17', '\x6', '\x19', '\a', '\x1B', 
		'\b', '\x1D', '\t', '\x1F', '\n', '\x5', '\x2', '\x3', '\x4', '\t', '\x3', 
		'\x2', '\x63', '|', '\x3', '\x2', '\x43', '\\', '\x3', '\x2', '\x32', 
		';', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x4', '\x2', '\f', '\f', '\xF', 
		'\xF', '\x5', '\x2', '\f', '\f', '\xF', '\xF', '>', '>', '\x3', '\x2', 
		'@', '@', '\x2', '{', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '!', '\x3', '\x2', '\x2', '\x2', '\a', '#', '\x3', '\x2', 
		'\x2', '\x2', '\t', '%', '\x3', '\x2', '\x2', '\x2', '\v', ')', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x11', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x13', 'K', '\x3', '\x2', '\x2', '\x2', '\x15', 'P', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '`', '\x3', '\x2', '\x2', '\x2', '\x19', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', 'i', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x1F', 'r', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\t', '\x2', '\x2', '\x2', '\"', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\t', '\x3', '\x2', '\x2', '$', '\b', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\t', '\x4', '\x2', '\x2', '&', '\n', '\x3', '\x2', '\x2', 
		'\x2', '\'', '*', '\x5', '\x5', '\x2', '\x2', '(', '*', '\x5', '\a', '\x3', 
		'\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x31', '\x3', '\x2', '\x2', '\x2', '+', '\x30', '\x5', 
		'\x5', '\x2', '\x2', ',', '\x30', '\x5', '\a', '\x3', '\x2', '-', '\x30', 
		'\x5', '\t', '\x4', '\x2', '.', '\x30', '\a', '\x61', '\x2', '\x2', '/', 
		'+', '\x3', '\x2', '\x2', '\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', 
		'/', '-', '\x3', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\t', '\x5', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\xE', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\xF', '\x2', 
		'\x2', ':', '=', '\a', '\f', '\x2', '\x2', ';', '=', '\t', '\x6', '\x2', 
		'\x2', '<', '\x39', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', '\x10', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', 
		'\r', '\x6', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', 'H', '\a', 
		'?', '\x2', '\x2', '\x45', 'G', '\x5', '\r', '\x6', '\x2', '\x46', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', '\x12', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x5', '\v', '\x5', '\x2', 'L', '\x14', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'O', '\x5', '\r', '\x6', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'W', '\a', '?', 
		'\x2', '\x2', 'T', 'V', '\x5', '\r', '\x6', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x5', '\xF', 
		'\a', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\b', '\n', 
		'\x2', '\x2', ']', '\x16', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x5', 
		'\xF', '\a', '\x2', '_', '\x61', '\x5', '\r', '\x6', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\b', '\v', '\x3', 
		'\x2', '\x63', '\x18', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'>', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\b', '\f', '\x4', '\x2', 'g', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\n', '\a', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'o', '\n', '\b', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\a', '@', '\x2', '\x2', 's', 't', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\b', '\xF', '\x2', '\x2', 'u', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x2', '\x3', '\x4', ')', '/', '\x31', '\x37', '<', 
		'\x41', 'H', 'P', 'W', '`', 'k', 'p', '\x5', '\x4', '\x3', '\x2', '\b', 
		'\x2', '\x2', '\x4', '\x4', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
