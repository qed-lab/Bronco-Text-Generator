//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/angry/source/repos/BroncoLibrary/BroncoParserANTLR\BroncoParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class BroncoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ID=1, TERMINAL=2, NL=3, WS=4, AT=5, HASH=6, PERCENT=7, COLON=8, COMMA=9, 
		LT=10, GT=11, BAG_CLOSE=12, LINE_CLOSE=13, NON_TERMINAL_OPEN=14, TARGET=15, 
		NON_TERMINAL_CLOSE=16, ARG_START=17, ARG_SEPERATE=18, TITLE_OPEN=19, TITLE_NAME=20, 
		TITLE_CLOSE=21;
	public const int
		RULE_file = 0, RULE_bag = 1, RULE_bag_line = 2, RULE_non_terminal = 3, 
		RULE_non_terminal_args = 4, RULE_bag_title = 5;
	public static readonly string[] ruleNames = {
		"file", "bag", "bag_line", "non_terminal", "non_terminal_args", "bag_title"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\\n'", null, "'@'", null, null, "':'", "','", "'<'", 
		"'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "TERMINAL", "NL", "WS", "AT", "HASH", "PERCENT", "COLON", 
		"COMMA", "LT", "GT", "BAG_CLOSE", "LINE_CLOSE", "NON_TERMINAL_OPEN", "TARGET", 
		"NON_TERMINAL_CLOSE", "ARG_START", "ARG_SEPERATE", "TITLE_OPEN", "TITLE_NAME", 
		"TITLE_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BroncoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BroncoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BroncoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BroncoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BagContext[] bag() {
			return GetRuleContexts<BagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BagContext bag(int i) {
			return GetRuleContext<BagContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12;
				bag();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TITLE_OPEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bag_titleContext bag_title() {
			return GetRuleContext<Bag_titleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_lineContext[] bag_line() {
			return GetRuleContexts<Bag_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bag_lineContext bag_line(int i) {
			return GetRuleContext<Bag_lineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAG_CLOSE() { return GetToken(BroncoParser.BAG_CLOSE, 0); }
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.EnterBag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.ExitBag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 2, RULE_bag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			bag_title();
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 18;
				bag_line();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TERMINAL || _la==NON_TERMINAL_OPEN );
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BAG_CLOSE) {
				{
				State = 23;
				Match(BAG_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERMINAL() { return GetTokens(BroncoParser.TERMINAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL(int i) {
			return GetToken(BroncoParser.TERMINAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_terminalContext[] non_terminal() {
			return GetRuleContexts<Non_terminalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_terminalContext non_terminal(int i) {
			return GetRuleContext<Non_terminalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_CLOSE() { return GetToken(BroncoParser.LINE_CLOSE, 0); }
		public Bag_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.EnterBag_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.ExitBag_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_lineContext bag_line() {
		Bag_lineContext _localctx = new Bag_lineContext(Context, State);
		EnterRule(_localctx, 4, RULE_bag_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 28;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case TERMINAL:
						{
						State = 26;
						Match(TERMINAL);
						}
						break;
					case NON_TERMINAL_OPEN:
						{
						State = 27;
						non_terminal();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 30;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINE_CLOSE) {
				{
				State = 32;
				Match(LINE_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_terminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_TERMINAL_OPEN() { return GetToken(BroncoParser.NON_TERMINAL_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(BroncoParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_TERMINAL_CLOSE() { return GetToken(BroncoParser.NON_TERMINAL_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Non_terminal_argsContext non_terminal_args() {
			return GetRuleContext<Non_terminal_argsContext>(0);
		}
		public Non_terminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_terminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.EnterNon_terminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.ExitNon_terminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_terminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_terminalContext non_terminal() {
		Non_terminalContext _localctx = new Non_terminalContext(Context, State);
		EnterRule(_localctx, 6, RULE_non_terminal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(NON_TERMINAL_OPEN);
			State = 36;
			Match(TARGET);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARG_START) {
				{
				State = 37;
				non_terminal_args();
				}
			}

			State = 40;
			Match(NON_TERMINAL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_terminal_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_START() { return GetToken(BroncoParser.ARG_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TARGET() { return GetTokens(BroncoParser.TARGET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET(int i) {
			return GetToken(BroncoParser.TARGET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARG_SEPERATE() { return GetTokens(BroncoParser.ARG_SEPERATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_SEPERATE(int i) {
			return GetToken(BroncoParser.ARG_SEPERATE, i);
		}
		public Non_terminal_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_terminal_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.EnterNon_terminal_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.ExitNon_terminal_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_terminal_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_terminal_argsContext non_terminal_args() {
		Non_terminal_argsContext _localctx = new Non_terminal_argsContext(Context, State);
		EnterRule(_localctx, 8, RULE_non_terminal_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(ARG_START);
			State = 43;
			Match(TARGET);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARG_SEPERATE) {
				{
				{
				State = 44;
				Match(ARG_SEPERATE);
				State = 45;
				Match(TARGET);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bag_titleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_OPEN() { return GetToken(BroncoParser.TITLE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_NAME() { return GetToken(BroncoParser.TITLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE_CLOSE() { return GetToken(BroncoParser.TITLE_CLOSE, 0); }
		public Bag_titleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.EnterBag_title(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBroncoParserListener typedListener = listener as IBroncoParserListener;
			if (typedListener != null) typedListener.ExitBag_title(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBroncoParserVisitor<TResult> typedVisitor = visitor as IBroncoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag_title(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bag_titleContext bag_title() {
		Bag_titleContext _localctx = new Bag_titleContext(Context, State);
		EnterRule(_localctx, 10, RULE_bag_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(TITLE_OPEN);
			State = 52;
			Match(TITLE_NAME);
			State = 53;
			Match(TITLE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,21,56,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,4,0,14,8,
		0,11,0,12,0,15,1,1,1,1,4,1,20,8,1,11,1,12,1,21,1,1,3,1,25,8,1,1,2,1,2,
		4,2,29,8,2,11,2,12,2,30,1,2,3,2,34,8,2,1,3,1,3,1,3,3,3,39,8,3,1,3,1,3,
		1,4,1,4,1,4,1,4,5,4,47,8,4,10,4,12,4,50,9,4,1,5,1,5,1,5,1,5,1,5,0,0,6,
		0,2,4,6,8,10,0,0,57,0,13,1,0,0,0,2,17,1,0,0,0,4,28,1,0,0,0,6,35,1,0,0,
		0,8,42,1,0,0,0,10,51,1,0,0,0,12,14,3,2,1,0,13,12,1,0,0,0,14,15,1,0,0,0,
		15,13,1,0,0,0,15,16,1,0,0,0,16,1,1,0,0,0,17,19,3,10,5,0,18,20,3,4,2,0,
		19,18,1,0,0,0,20,21,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,24,1,0,0,0,
		23,25,5,12,0,0,24,23,1,0,0,0,24,25,1,0,0,0,25,3,1,0,0,0,26,29,5,2,0,0,
		27,29,3,6,3,0,28,26,1,0,0,0,28,27,1,0,0,0,29,30,1,0,0,0,30,28,1,0,0,0,
		30,31,1,0,0,0,31,33,1,0,0,0,32,34,5,13,0,0,33,32,1,0,0,0,33,34,1,0,0,0,
		34,5,1,0,0,0,35,36,5,14,0,0,36,38,5,15,0,0,37,39,3,8,4,0,38,37,1,0,0,0,
		38,39,1,0,0,0,39,40,1,0,0,0,40,41,5,16,0,0,41,7,1,0,0,0,42,43,5,17,0,0,
		43,48,5,15,0,0,44,45,5,18,0,0,45,47,5,15,0,0,46,44,1,0,0,0,47,50,1,0,0,
		0,48,46,1,0,0,0,48,49,1,0,0,0,49,9,1,0,0,0,50,48,1,0,0,0,51,52,5,19,0,
		0,52,53,5,20,0,0,53,54,5,21,0,0,54,11,1,0,0,0,8,15,21,24,28,30,33,38,48
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
